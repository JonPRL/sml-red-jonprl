Thm boolTest : [ (x : bool) -> bool true ] by [
  { lam x. if x then 'tt else 'ff };
  auto
].

Thm pathTest : [ paths({x}. S1; base; base) true ] by [
  { <x> 'loop{x} }; auto
].

Thm funElimTest : [ (f : (x : bool) -> bool) -> bool true ] by [
  { lam f. let x = f {'tt}. hyp{x} };

  auto
].

Thm s1ElimTest : [ (s : S1) -> S1 true ] by [
  { lam s.
    case s of
       base => 'base
     | loop{x} => 'loop{x}
  };

  auto
].

// Useful for stepping through a proof RedPRL completes automatically, to see
// what is being done.
Tac tryStep = [ auto-step || id ].

Thm apEqTest : [
  (f : (x : bool) -> bool)
    -> paths({y}. bool; f tt; f tt) true
] by [
  { lam f. <y> '(,f tt) };

  // Try commenting out the following line, and stepping through the proof with tryStep().
  auto
].

Def boolEta(#M : exp) : exp = [
  if([a].bool; #M; tt; ff)
].

// Let's prove the existence of a path between the identity function on booleans, and the
// function that takes a boolean to a vacuous if statement.
//
// The most fun way to use RedPRL is interactively! We will write our proof in the development
// calculus. The advantage of this style of proof is that we can leave holes, and interactively figure out
// what we need to do.
//
Thm pathTest2 : [ paths({x}. (b:bool) -> bool; lam([b].b); lam([b].boolEta(b))) true ] by [
  { let h : [(b:bool) -> paths({x}.bool; b; boolEta(b)) true] =
      lam b. if b then <y> 'tt else <y> 'ff.
    <x> lam b. let p = h hyp{b}. '(,p @ x)
  };

  auto
].

// It turns out that it is just as good to figure out what the witness program for this path is
// by hand, and then tell RedPRL to try and prove that it does in fact witness this path.
// This approach has the advantage of being far more concise, but it has the disadvantage of
// not being interactive: you must know ahead of time the entirety of the program, and
// cannot take advantage of types in order to synthesize part of it.
Thm pathTest3 : [ paths({x}. (b:bool) -> bool; lam([b].b); lam([b].boolEta(b))) true ] by [
  // I'm surprised that RedPRL can typecheck this properly! Quite encouraging.
  '(<x> lam([b]. if([b].paths({x}.bool; b; boolEta(b)); b; <y> tt; <y> ff) @ x));
  auto
].

Thm pairTest : [ (a : S1) * paths({x}. S1; a; base) true ] by [
  < {'base}
  , <x> 'loop{x}
  >;
  auto
].

Thm strictBoolTest : [ lam([x]. if/s(x; tt; ff)) = lam([x]. x) : (x : sbool) -> bool ] by [
  { lam x. elim{x}
  }; auto
].

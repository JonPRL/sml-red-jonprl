Thm boolTest : [ (x : bool) -> bool true ] by [
  lam x {
    if x then { 'tt } else { 'ff }
  };

  auto
].

Thm pathTest : [ paths({x}. S1; base; base) true ] by [
  <x> {
    'loop{x}
  };

  auto
].


Thm funElimTest : [ (f : (x : bool) -> bool) -> bool true ] by [
  lam f {
    let x = f {'tt} in {
      hyp{x}
    }
  };

  auto
].

Thm s1ElimTest : [ (s : S1) -> S1 true ] by [
  lam s {
    case s of
       base => {'base}
     | loop{x} => {'loop{x}}
  };

  auto
].

// Useful for stepping through a proof RedPRL completes automatically, to see
// what is being done.
Tac tryStep = [ auto-step || id ].

Thm apEqTest : [
  (f : (x : bool) -> bool)
    -> paths({y}. bool; f tt; f tt) true
] by [
  lam f {
    <y> {
      '(,f tt)
    }
  };

  // Try commenting out the following line, and stepping through the proof with tryStep().
  auto
].

Def boolEta(#M : exp) : exp = [
  if([a].bool; #M; tt; ff)
].

Thm pathTest1 : [ (b:bool) -> paths({x}.bool; b; boolEta(b)) true ] by [
  lam x {
    if x then {
      <y> { 'tt }
    } else {
      <y> { 'ff }
    }
  };
  auto;
  symmetry;
  head-expand;
  auto
].

Tac headExpandAll = [
  head-expand; symmetry; head-expand
].

Thm pathTest2 : [ paths({x}. (b:bool) -> bool; lam([b].b); lam([b].boolEta(b))) true ] by [
  let h : [(b:bool) -> paths({x}.bool; b; boolEta(b)) true] = {
    lemma { pathTest1() : exp }
  } in {
    <x> {
      lam b {
        let z = h {hyp{b}} in { '(,z @ x) }
      }
    };
    auto; headExpandAll(); auto
  };

].

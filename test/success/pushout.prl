Thm Pushout/Test0 : [
  (pushout record record bool [_] tuple [_] tuple)
] by [
  `(left tuple)
].

Thm Pushout/Test1 : [
  (pushout bool bool bool [x] x [x] x)
] by [
  `(right tt)
].

Thm Pushout/Test2 : [
  (-> dim (pushout bool bool bool [x] x [x] x))
] by [
  abs u => `(glue u tt tt tt)
].

Def S1' = [(pushout record record bool [_] tuple [_] tuple)].

// Someone told me the following is an equivalence
Thm PushoutToS1 : [
  (-> S1' S1)
] by [
  lam p => fresh a b u:dim c -> elim p;
    [ `base
    , `base
    , elim c;
      [ `(loop u)
      , `base
      ]
    ];
    auto
].

Thm PushoutToS1/Test0 : [
  (= (-> S1' S1) PushoutToS1 PushoutToS1)
] by [
  unfold PushoutToS1; // otherwise too easy
  refine eq/intro;
  fresh s1 -> refine fun/eq/lam;
  [ refine pushout/eq/pushout-rec ];
  auto
].

Thm PushoutBetaEasiest(#i:lvl) : [
  (-> [a b c d : (U #i)] [w : d]
      [u : dim] [x : a] [y : b] [z : c]
      (= d (pushout-rec [_] d (glue u z x y) [_] w [_] w [_ _] w) w))
] by [
  lam a b c d w => abs u => lam x y z =>
    refine eq/intro;
    refine pushout/beta/glue;
    #1{`(pushout a b c [_] x [_] y)};
    #1{`d};
    auto
].

Thm PushoutBetaEasier(#i:lvl) : [
  (-> [a b c : (U #i)] [f : (-> c a)] [g : (-> c b)]
      [d : (-> (pushout a b c [z] ($ f z) [z] ($ g z)) (U #i))]
      [wl : (-> [x : a] ($ d (left x)))] [wr : (-> [y : b] ($ d (right y)))]
      [wg : (-> [v : dim] [z : c] ($ d (glue v z ($ f z) ($ g z))))]
      [wcohl : (-> [z : c] (= ($ d (left ($ f z))) ($ (@ wg 0) z) ($ wl ($ f z))))]
      [wcohr : (-> [z : c] (= ($ d (right ($ g z))) ($ (@ wg 1) z) ($ wr ($ g z))))]
      [u : dim] [m : c]
      (= ($ d (glue u m ($ f m) ($ g m)))
      	 (pushout-rec [p] ($ d p) (glue u m ($ f m) ($ g m)) [x] ($ wl x) [y] ($ wr y) [v z] ($ (@ wg v) z))
	 ($ (@ wg u) m)))
] by [
  lam a b c f g d wl wr wg wcohl wcohr => abs u => lam m =>
    refine eq/intro;
    fresh po x y v:dim z -> refine pushout/beta/glue;
    [ refine fun/eq/app;
      [ exact (-> [z : c] ($ d (glue u z ($ f z) ($ g z)))); refine line/eq/app; auto ];
      auto
    , `(pushout a b c [x] ($ f x) [y] ($ g y))
    , `($ d po)
    , auto
    , auto
    , auto
    , auto
    , auto
    , auto
    , auto
    , refine fun/eq/app;
      [ exact (-> [z : c] ($ d (glue v z ($ f z) ($ g z)))); refine line/eq/app; auto ];
      auto
    , refine eq/internalize; use wcohl [`z];
    , refine eq/internalize; use wcohr [`z]
    ];
    auto
].

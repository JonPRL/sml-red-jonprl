Def HasAllPathsTo (#C,#c) = [(-> [c' : #C] (path [_] #C c' #c))].

Def IsContr (#C) = [(* [c : #C] (HasAllPathsTo #C c))].

Def Fiber (#A,#B,#f,#b) = [(* [a : #A] (path [_] #B ($ #f a) #b))].

Def IsEquiv (#A,#B,#f) = [(-> [b : #B] (IsContr (Fiber #A #B #f b)))].

Def Equiv (#A,#B) = [(* [f : (-> #A #B)] (IsEquiv #A #B f))].

Def Id = [(lam [a] a)].

Thm IdIsEquiv(#l:lvl) at (++ #l) : [
  (-> [ty : (U #l hcom)] (IsEquiv ty ty Id))
] by [
  lam ty a =>
  { {use a, abs _ => use a}
  , lam {_,c'} => abs i =>
       { `(hcom 1~>0 ty a
           [i=0 [j] (@ c' j)]
           [i=1 [j] a])
       , abs j =>
          `(hcom 1~>j ty a
            [i=0 [j] (@ c' j)]
            [i=1 [j] a])
       }
  }
].

Thm IdEquiv(#l:lvl) at (++ #l) : [
  (-> [ty : (U #l hcom)] (Equiv ty ty))
] by [
  lam ty =>
    {`Id, use (IdIsEquiv #l) [use ty]}
].

Print IdEquiv.

Def IdV(#i:dim, #l:lvl, #ty) = [
  (V #i #ty #ty ($ (IdEquiv #l) #ty))
].

Thm IdV/Wf(#i:dim, #l:lvl) at (+ #l 2) : [
  (->
   [ty : (U #l hcom)]
   (mem (U (++ #l)) (IdV #i #l ty)))
] by [
  lam ty => auto
].

Thm IdV/Test0(#i:dim, #l:lvl) at (++ #l) : [
  (->
   [ty : (U #l hcom)]
   [a : ty]
   (mem (IdV #i #l ty) (Vin #i a a)))
] by [
  lam ty a => auto
].

Thm IdV/Test1(#l:lvl) at (++ #l) : [
  (->
   [ty : (U #l hcom)]
   [a : ty]
   (= ty (Vproj (dim 0) (Vin (dim 0) a a) Id) a))
] by [
  lam ty a => auto
].

Thm IdV/Test2(#l:lvl) at (++ #l) : [
  (->
   [ty : (U #l kan)]
   [a : ty]
   (= ty (coe 0~>1 [x] (IdV x #l ty) a)
         (coe 0~>1 [_] ty a)))
] by [
  lam ty a => auto
].

Print IdV/Test2.

Def Not = [(lam [b] (if b ff tt))].

Thm Bool/reflect : [
 (->
  [a b : bool]
  [p : (path [_] bool a b)]
  (= bool a b))
] by [
  lam a b p => `(coe 0~>1 [x] (= bool a (@ p x)) ax)
].

Tac Bool/contra/inverse (#p:exp) = [
  query gl <- concl;
  match gl {
    [a b | #jdg{%a = %b in bool at 0} =>
      claim eq : [(= bool %b %a) at 0] by [use Bool/reflect [`%b, `%a, `#p]; auto];
      symmetry; elim eq; auto
    ]
    [a | %[a:jdg] => id]
  }
].

Thm NotIsEquiv : [
  (IsEquiv bool bool Not)
] by [
  lam b =>
  { {`($ Not b), abs _ => use b}
  , lam {_,p'} =>
     (abs i =>
        { `($ Not (hcom 1~>0 bool b
                    [i=0 [j] (@ p' j)]
                    [i=1 [j] b]))
        , abs j =>
            `(hcom 1~>j bool b
              [i=0 [j] (@ p' j)]
              [i=1 [j] b])
        }
      );
      auto; (Bool/contra/inverse p')
  }
].

Thm NotEquiv : [
  (Equiv bool bool)
] by [
  {`Not, `NotIsEquiv}
].

Def NotV(#i:dim) = [(V #i bool bool NotEquiv)].

Thm NotV/Wf(#i:dim) at 1 : [
  (mem (U 0 kan) (NotV #i))
] by [
  auto
].

Thm NotV/Test0(#i:dim) : [
  (->
   [a : bool]
   (mem (NotV #i) (Vin #i ($ Not a) a)))
] by [
  lam a => auto
].

Thm NotV/Test1 : [
  (->
   [a : bool]
   (= bool (coe 0~>1 [x] (NotV x) a) ($ Not a)))
] by [
  lam a => auto
].

Thm NotV/Test2 : [
  (->
   [a : bool]
   (= bool (coe 1~>0 [x] (NotV x) a) ($ Not a)))
] by [
  lam a => auto
].

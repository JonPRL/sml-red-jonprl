// We can write a cool user-defined tactic for asserting and then rewriting along an equality.
// (Rewrite m n a {x} c) asserts the equality [m = n in a], and rewrites using the motive [{x} c].
Tac Rewrite(#m; #n; #a; #t : tac; #c : {hyp}.exp) = [
  let p : [#m = #n in #a] = #t.

  // Use the elimination rule for equality; we have to provide an annotation to
  // the hypothesis 'p' (sad!). We bind a new hypothesis which will represent the location
  // in the goal #c which is being rewritten.
  fresh x <- elim p:triv;
  [`{#c x}, id, auto, auto]
].

Thm EqualityElimTest : [
  (-> [b : bool] (path {_} bool tt (if tt tt ff)))
] by [
  // We're going to prove this in a silly way to illustrate equality elimination.
  // We'll rewrite the goal by asserting [(if tt tt ff) = tt in bool].
  (Rewrite
   (if tt tt ff) tt bool
   (tactic auto)
   // we specify the motive (to be unified with the goal) by binding a *hypothesis* x,
   // which can then be unquoted in the term that we provide.
   {x} (-> bool (path {_} bool tt ,x)));

  // observe that the goal has now been rewritten!
  ?check-this-out;
  lam b. <_> `tt
].
// Here are some cool examples of using RedPRL's generic and hypothetical judgment to reason
// semi-externally.

// We can prove the following path composition theorem for any arbitrary type #A; this 'thm'
// declaration elaborates to a definition Hcom/Poly{a:hyp}(#A:exp), so when you want to use 
// this as a lemma, you simply supply to the operator the appropriate hypothesis in your context
// which witnesses that #A = #A type. We could add a generic tactic that applies a lemma and 
// *asserts* all its hypotheses, or tries to unify these with the context, etc.
Thm Hcom/Poly(#A : exp) : [
  _ : #A = #A type
  >>
    (a : #A)
      -> (b : #A)
      -> (c : #A) 
      -> (d  : #A) 
      -> paths({_}.#A; a; b)
      -> paths({_}.#A; a; c)
      -> paths({_}.#A; b; d) 
      -> paths({_}.#A; c; d)
    true
] by [
  { lam a. lam b. lam c. lam d.
    lam pab. lam pac. lam pbd.
    <i> 'hcom{i; 0 ~> 1}(#A; ,pab @ i; {j}. ,pac @ j; {j}. ,pbd @ j)
  };
  <|auto|>
].

Thm Cap{i : dim}(#A : exp) : [ 
  _ : #A = #A type,
  x : #A true
  >> hcom{i; 0 ~> 0}(#A; x; {_}. x; {_}. x) = x in #A
] by [
  auto
].

Thm Tube(#A : exp) : [
  _ : #A = #A type,
  x : #A true
  >> hcom{0; 0 ~> 1}(#A; x; {_}. x; {_}. x) = x in #A
] by [
  auto
].

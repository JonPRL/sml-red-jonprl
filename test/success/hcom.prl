// Here are some cool examples of using RedPRL's generic and hypothetical judgment to reason
// semi-externally.

// We can prove the following path composition theorem for any arbitrary type #A; this 'thm'
// declaration elaborates to a definition Hcom/Poly{a:hyp}(#A:exp), so when you want to use 
// this as a lemma, you simply supply to the operator the appropriate hypothesis in your context
// which witnesses that #A = #A type. We could add a generic tactic that applies a lemma and 
// *asserts* all its hypotheses, or tries to unify these with the context, etc.
Thm Hcom/Poly(#A) : [
  a/type : #A type
  >>
  (->
   [a b c d : #A]
   (path {_} #A a b)
   (path {_} #A a c)
   (path {_} #A b d)
   (path {_} #A c d))
] by [
  lam a, b, c, d, pab, pac, pbd.
    <i> 
      `(hcom{0 ~> 1} #A (@ ,pab i) 
        [i=0 {j} (@ ,pac j)]
        [i=1 {j} (@ ,pbd j)])
].

Extract Hcom/Poly.

Thm Hcom/trans(#A) : [
  a/type : #A type
  >>
  (->
   [a b c : #A]
   (path {_} #A a b)
   (path {_} #A b c)
   (path {_} #A a c))
] by [
  lam a, b, c, pab, pbc.
    <i>
      `(hcom{0 ~> 1} #A (@ ,pab i) 
        [i=0 {_} ,a] 
        [i=1 {j} (@ ,pbc j)])
].

Thm Hcom/symm(#A) : [
  a/type : #A type
  >> 
  (->
   [a b : #A]
   (path {_} #A a b)
   (path {_} #A b a))
] by [
  lam a, b, pab.
    <i>
      `(hcom{0 ~> 1} #A ,a 
        [i=0 {j} (@ ,pab j)]
        [i=1 {_} ,a])
].

Thm Cap{i : dim}(#A) : [ 
  a/type : #A type,
  x : #A
  >> (hcom{0 ~> 0} #A x [i=0 {_} x] [i=1 {_} x]) = x in #A
] by [
  auto
].

Thm Tube(#A) : [
  a/type : #A type,
  x : #A
  >> (hcom{0 ~> 1} #A x [1=1 {_} x] [0=0 {_} x]) = x in #A
] by [
  auto
].

Thm TrueByEvaluation : [
  (hcom{0 ~> 0} bool tt) in bool
] by [
  auto
].

Thm One : [
  1 in int
] by [
  auto
].

Thm NegOne : [
  -1 in int
] by [
  auto
].

Thm NatOne : [
  1 in nat
] by [
  auto
].

Thm NatIsInt : [
  (-> [x : nat] (= int x x))
] by [
  lam x => elim x; auto
].

Thm Pred : [
  (-> nat nat)
] by [
  lam a =>
  elim a;
  [ `zero ];
  [ with a' ind => `a' ]
].

Thm Plus : [
  (-> nat nat nat)
] by [
  lam a =>
  elim a;
  [ lam x => use x
  , with ind a' =>
    lam x =>
      let ih/x = ind [use x]; `(succ ih/x)
  ]
].

Thm Plus/wf : [
  Plus in (-> nat nat nat)
] by [
  auto
].

Thm Plus/zeroL : [
  (-> [n : nat] (= nat ($ Plus 0 n) n))
] by [
  lam n => auto
].

Thm Plus/zero/R : [
  (-> [n : nat] (= nat ($ Plus n 0) n))
] by [
  lam n =>
    elim n;
    [ `ax
    , with ind n' => 
      rewrite ind at left;
      [ with x => `(succ x) ];
      auto
    ]
].

Thm Plus/succ/L : [
  (-> [n m : nat] (= nat ($ Plus (succ n) m) (succ ($ Plus n m))))
] by [
  lam n m => auto
].


Thm Plus/succ/R : [
  (-> [n m : nat] (= nat ($ Plus n (succ m)) (succ ($ Plus n m))))
] by [
  lam n m => elim n;
    [ auto
    , with n'/ih n' => rewrite ($ Plus/succ/L n' (succ m)) at left;
      [ with x => `x
      , rewrite ($ Plus/succ/L n' m) at right;
        [ with x => `(succ x)
        , rewrite n'/ih at left;
          [ with x => `(succ x) ]
        ]
      ]
    ];

    auto
].

Thm Plus/test0 : [
  (-> [n m : nat] [eq : (= nat ($ Plus n zero) m)] (= nat n m))
] by [
  lam n m eq =>
    rewrite ($ Plus/zero/R n) in eq at left;
    [ with x => `x ]; auto; use eq
].

Thm Eq/sym : [
  (-> [ty : (U 0)] [a b : ty] (= ty a b) (= ty b a))
] by [
  lam ty a b eq => symmetry; auto; use eq
].

Thm Plus/comm : [
  (-> [n m : nat] (= nat ($ Plus n m) ($ Plus m n)))
] by [
  lam n m => elim n;
    [ symmetry; `($ Plus/zero/R  m)
    , with n'/ih n' => rewrite ($ Plus/succ/L n' m) at left;
      [ with x => `x
      , rewrite n'/ih at left;
        [ with x => `(succ x)
        , symmetry; `($ Plus/succ/R m n')
        ]
      ]
    ];

    auto
].


Thm NatSymm : [
  (->
   [a b : nat]
   (path [_] nat a b)
   (path [_] nat b a))
] by [
  lam a b pab =>
  abs i =>
    `(hcom 0~>1 nat a
      [i=0 [j] (@ pab j)]
      [i=1 [_] a])
].

Thm IntPred : [
  (-> int int)
] by [
  lam a => elim a;
  [ `-1
  , with _ a' => 
      elim a';
      [`0, with _ n => `(succ n)]
  , `-2
  , with _ a' =>
      `(negsucc (succ (succ a')))
  ]
].

Thm IntSucc : [
  (-> int int)
] by [
  lam a => elim a;
  [ `1, with _ a' => `(succ (succ a'))
  , `0, with _ a' => `(negsucc a')
  ]
].

Thm IntPlus : [
  (-> int int int)
] by [
  lam a => elim a;
  [ lam b => use b
  , with ind a' => lam b => `($ IntSucc ($ ind b))
  , lam b => `($ IntPred b)
  , with ind a' => lam b => `($ IntPred ($ ind b))
  ]
].

Thm Int4Plus3 : [
  ($ IntPlus 4 3) = 7 in int
] by [ auto ].

Thm Int-6Plus10 : [
  ($ IntPlus -6 10) = 4 in int
] by [ auto ].

Thm Int-1Plus-9 : [
  ($ IntPlus -1 -9) = -10 in int
] by [ auto ].

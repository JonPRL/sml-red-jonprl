theorem One : 
  (int 1) in int
by {
  auto
}.

theorem NegOne : 
  (int -1) in int
by {
  auto
}.

theorem NatOne : 
  (nat 1) in nat
by {
  auto
}.

theorem NatIsInt : 
  (-> [x : nat] (mem int (pos x)))
by {
  lam x => auto
}.

theorem Pred : 
  (-> nat nat)
by {
  lam a =>
  elim a;
  [ `zero ];
  [ with a' ind => `a' ]
}.

theorem Plus : 
  (-> nat nat nat)
by {
  lam a =>
  elim a;
  [ lam x => use x
  , with ind a' =>
    lam x =>
      let ih/x = ind [use x]; `(succ ih/x)
  ]
}.

theorem Plus/wf : 
  Plus in (-> nat nat nat)
by {
  auto
}.

theorem Plus/zeroL : 
  (-> [n : nat] (= nat ($ Plus (nat 0) n) n))
by {
  lam n => auto
}.

theorem Plus/zero/R : 
  (-> [n : nat] (= nat ($ Plus n (nat 0)) n))
by {
  lam n =>
    elim n;
    [ `ax
    , with ind n' => 
      rewrite ind at left;
      [ with x => `(succ x) ];
      auto
    ]
}.

theorem Plus/succ/L : 
  (-> [n m : nat] (= nat ($ Plus (succ n) m) (succ ($ Plus n m))))
by {
  lam n m => auto
}.

theorem Plus/succ/R : 
  (-> [n m : nat] (= nat ($ Plus n (succ m)) (succ ($ Plus n m))))
by {
  lam n m => elim n;
    [ auto
    , with n'/ih n' => rewrite ($ Plus/succ/L n' (succ m)) at left;
      [ with x => `x
      , rewrite ($ Plus/succ/L n' m) at right;
        [ with x => `(succ x)
        , rewrite n'/ih at left;
          [ with x => `(succ x) ]
        ]
      ]
    ];

    auto
}.

theorem Plus/test0 : 
  (-> [n m : nat] [eq : (= nat ($ Plus n zero) m)] (= nat n m))
by {
  lam n m eq =>
    rewrite ($ Plus/zero/R n) in eq at left;
    [ with x => `x ]; auto; use eq
}.

theorem Eq/sym : 
  (-> [ty : (U 0)] [a b : ty] (= ty a b) (= ty b a))
by {
  lam ty a b eq => symmetry; use eq
}.

theorem Plus/comm : 
  (-> [n m : nat] (= nat ($ Plus n m) ($ Plus m n)))
by {
  lam n m => elim n;
    [ symmetry; `($ Plus/zero/R  m)
    , with n'/ih n' => rewrite ($ Plus/succ/L n' m) at left;
      [ with x => `x
      , rewrite n'/ih at left;
        [ with x => `(succ x)
        , symmetry; `($ Plus/succ/R m n')
        ]
      ]
    ];

    auto
}.

theorem NatSymm : 
  (->
   [a b : nat]
   (path [_] nat a b)
   (path [_] nat b a))
by {
  lam a b pab =>
  abs i =>
    `(hcom 0~>1 nat a
      [i=0 [j] (@ pab j)]
      [i=1 [_] a])
}.

theorem IntPred : 
  (-> int int)
by {
  lam a => elim a;
  [ with n => elim n;
    [ `(int -1)
    , with _ n' => `(pos n')
    ]
  , with n => `(negsucc (succ n))
  ];
}.

theorem IntSucc : 
  (-> int int)
by {
  lam a => elim a;
  [ with n => `(pos (succ n))
  , with n => elim n;
    [ `(int 0)
    , with _ n' => `(negsucc n')
    ]
  ]
}.

theorem IntPlus : 
  (-> int int int)
by {
  lam a => elim a;
  [ with n => elim n;
    [ lam b => use b
    , with ind a' => lam b => `($ IntSucc ($ ind b))
    ]
  , with n => elim n;
    [ lam b => `($ IntPred b)
    , with ind a' => lam b => `($ IntPred ($ ind b))
    ]
  ]
}.

theorem Int4Plus3 : 
  ($ IntPlus (int 4) (int 3)) = (int 7) in int
by { auto }.

theorem Int-6Plus10 : 
  ($ IntPlus (int -6) (int 10)) = (int 4) in int
by { auto }.

theorem Int-1Plus-9 : 
  ($ IntPlus (int -1) (int -9)) = (int -10) in int
by { auto }.

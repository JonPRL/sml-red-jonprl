Thm One : [
  1 in int
] by [
  auto
].

Thm NegOne : [
  -1 in int
] by [
  auto
].

Thm NatOne : [
  1 in nat
] by [
  auto
].

Thm Pred : [
  (-> nat nat)
] by [
  lam a.
  fresh a', ind <- elim a;
  [ `zero ];
  [ hyp a' ];
].

Extract Pred.

Def Pred2 = [
  (lam [x] (nat-rec x zero [y z] y))
].

Extract Pred2.

Thm Prod2Wf : [
  Pred2 in (-> nat nat)
] by [
  fresh n1, n2, n2', ind <- auto;
  [ `nat ]; // providing the motive
  auto;
].

Thm Plus : [
  (-> nat nat nat)
] by [
  lam a.
  fresh a', ind <- elim a;
  [ `(lam [x] x)
  , `(lam [x] (succ ($ ,ind x)))
  ]
].

Extract Plus.

Def Plus2 = [
  (lam [a]
   (nat-rec
    a
    (lam [x] x)
    [a' ind] (lam [x] (succ ($ ind x)))))
].

Thm Plus2Wf : [
  Plus2 in (-> nat nat nat)
] by [
  fresh a, b, b', ind <- auto;
  [ `(-> nat nat) ];
  auto
].

Thm Plus2UnitL : [
  n : nat >> ($ Plus2 0 n) = n in nat
] by [
  auto
].


Thm NatSymm : [
  (->
   [a b : nat]
   (path {_} nat a b)
   (path {_} nat b a))
] by [
  lam a. lam b. lam pab.
  fresh i:dim <- refine path/intro;
  #0 {
    `(hcom{0 ~> 1} nat ,a 
      [i=0 {j} (@ ,pab j)]
      [i=1 {_} ,a])
  };

  refine hcom/eq/tube;
  auto
].

Print NatSymm.
// Some theorems from http://www.nuprl.org/MathLibrary/LogicalInvestigations/.

theorem Thm1 :
  (-> 
   [p q : (U 0)]
   p q p)
by
  lam p q a b => use a
.

theorem Thm2 :
  (->
   [p q r : (U 0)]
   (-> p q)
   (-> p q r)
   p r)
by
  lam p q r f g a =>
  use g [use a, use f [use a]]
.

// It is worthwhile to print out the extract program / evidence for Thm2.
do let val M = extract Thm2; print M.

// here's a proof using lower-level scripting
theorem Thm3/low-level :
  (->
   [p q r : (U 0)]
   (-> p q)
   (-> q r)
   (-> p r))
by
  // fresh p q r pq qr x -> 
  repeat {refine fun/intro || id};
  auto; with x qr pq r q p => 
  elim qr; elim pq;
  [ use x
  , with _ y => use y
  , use x
  , with _ _ _ z => use z
  ]
.

do let val M = extract Thm3/low-level; print M.

// here's a high-level version of the above proof. proofs using the high-level 
// programming calculus may be longer, but they are often easier to engineer, 
// and nicely segregate main goals from auxiliary goals.
theorem Thm3/high-level :
  (->
   [p q r : (U 0)]
   (-> p q)
   (-> q r)
   (-> p r))
by
  lam p q r f g x =>
  use g [use f [use x]]
.

print Thm3/high-level.

define Not(#A) =  (-> #A void) .

theorem Thm4 :
  (-> [p q : (U 0)] (Not p) p q)
by
  lam p q r a =>
  unfold Not;
  let boom = r [use a];
  elim boom
.

theorem Thm5 :
  (-> [p : (U 0)] p (Not (Not p)))
by
  lam p a => unfold Not; lam r =>
  use r [use a]
.

print Thm4.
print Thm5.


theorem Thm6(#A,#B) :
  (-> [p q : (U 0)] (-> p q) (Not q) (Not p))
by
  lam p q f g => unfold Not; lam a =>
  use g [use f [use a]]
.

print Thm6.

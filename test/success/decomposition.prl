Thm Decomposition : [
  (->
   (record [foo : (record [a : bool] [b : (* bool bool)])] [bar : S1])
   bool)
] by [
  lam x =>
    // let {bar = bar, foo = foo} = x;
    ?

    
   // elim x;
   // pop foo _ => 
   //   elim foo;
   //   pop a b =>
   //     elim b;
   //     pop welp _ => ?

  // lam {foo = {a = a, b = {welp}}} =>
  // use welp
].

Quit.

Extract Decomposition.

Thm Apply : [
  (-> 
   (->
    bool
    bool
    (path [_]
     (record [a : S1])
     (tuple [a base])
     (tuple [a base])))
   S1)
] by [
  lam f =>
    let {a = a} = f [`tt, `ff, `(dim 0)];
    use a
].

Extract Apply.

Thm UseHypTest : [
  (-> bool bool)
] by [
  lam x =>
  claim p : [(-> bool S1 bool)] by [lam b c => use b];
  use p [use x, `(loop 0)]
].

Print UseHypTest.

Thm UseLemmaTest : [
  (-> bool bool)
] by [
  lam x =>
  use UseHypTest [use x]
].

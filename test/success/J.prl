Def Singl(#A, #a) = [
  (* [x : #A] (path [_] #A #a x))
].


Thm Connection(#l:lvl) : [
  (->
   [ty : (U #l kan)]
   [a b : ty]
   [p : (path [_] ty a b)]
   (path [i] (path [_] ty a (@ p i)) (abs [_] a) p))
] by [
  lam ty, a, b, p.
    <i j>
      `(hcom 0~>1 ty a
        [i=0 [k]
         (hcom 1~>0 ty (@ p k)
          [k=0 [_] a]
          [k=1 [l] (@ p l)])]
        [i=1 [k]
         (hcom 1~>j ty (@ p k)
          [k=0 [_] a]
          [k=1 [l] (@ p l)])]
        [j=0 [k]
         (hcom 1~>0 ty (@ p k)
          [k=0 [_] a]
          [k=1 [l] (@ p l)])]
        [j=1 [k]
         (hcom 1~>i ty (@ p k)
          [k=0 [_] a]
          [k=1 [l] (@ p l)])]
        [i=j [k]
         (hcom 1~>i ty (@ p k)
          [k=0 [_] a]
          [k=1 [l] (@ p l)])])
].

Thm ContrSingl(#l:lvl) : [
  (->
   [ty : (U #l kan)]
   [a b : ty]
   [p : (path [_] ty a b)]
   (path
    [_] (Singl ty a)
    (tuple a (abs [_] a))
    (tuple b p)))
] by [
  lam ty, a, b, p.
  <i>
    { use p [`i]
    , use (Connection #l) [use ty, use a, use b, use p, `i]
    }
].

Thm J(#l:lvl) : [
  (->
   [ty : (U #l kan)]
   [a : ty]
   [fam : (-> [x : ty] (path [_] ty a x) (U #l kan))]
   [d : ($ fam a (abs [_] a))]
   [x : ty]
   [p : (path [_] ty a x)]
   ($ fam x p))
] by [
  lam ty, a, fam, d, x, p.
    // sadly our tactics aren't good enough yet to construct this part
    // interactively.
    `(coe 0~>1
      [i] ($ fam
             (!proj1 (@ ($ (ContrSingl #l) ty a x p) i))
             (!proj2 (@ ($ (ContrSingl #l) ty a x p) i)))
      d)
].

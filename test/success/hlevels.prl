Def HasAllPathsTo (#C,#c) = [(-> [c' : #C] (path [_] #C c' #c))].
Def IsContr (#C) = [(* [c : #C] (HasAllPathsTo #C c))].
Def IsProp (#A) = [(-> [a b : #A] (path [_] #A a b))].
Def IsSet (#A) = [(-> [a b : #A] (IsProp (path [_] #A a b)))].

Thm InhPropIsContr(#l:lvl) : [
 (->
  [ty : (U #l kan)] // can I use pre here?
  [h : (IsProp ty)]
  [a : ty]
  (IsContr ty))
] by [
  unfold IsProp;
  lam ty, h, a => {use a, lam x => `($ h x a)}
].

Thm PropPi(#l:lvl) : [
 (->
  [tyA : (U #l kan)]
  [tyB : (-> tyA (U #l kan))]
  [h : (-> [x : tyA] (IsProp ($ tyB x)))]
  (IsProp (-> [x : tyA] ($ tyB x))))
] by [
  unfold IsProp; lam tyA, tyB, h, f, g =>
  abs i => lam x => `(@ ($ h x ($ f x) ($ g x)) i)
].

Thm PropSet(#l:lvl) : [
  (->
   [tyA : (U #l kan)]
   [h : (IsProp tyA)]
   (IsSet tyA))
] by [
  unfold [IsSet, IsProp];
  lam tyA, h, a, b, p, q => 
  abs j i =>
    `(hcom 0~>1 tyA a
      [i=0 [k] (@ ($ h a a) k)]
      [i=1 [k] (@ ($ h a b) k)]
      [j=0 [k] (@ ($ h a (@ p i)) k)]
      [j=1 [k] (@ ($ h a (@ q i)) k)])
].

// This proof should be easy, but it is not...
Thm IsPropIsProp(#l:lvl) : [
  (->
   [tyA : (U #l kan)]
   (IsProp (IsProp tyA))
  )
] by [
  unfold IsProp;
  lam tyA, h1, h2 =>
  (abs i => lam a, b =>
    let foo = (PropSet #l) [`tyA, `h1] in
    unfold [IsSet, IsProp];
    use foo [`a, `b, use h1 [`a, `b], use h2 [`a, `b], `i]);
  unfold PropSet; auto
].

// // This should be exactly like the one above:
// Thm IsPropIsSet(#l:lvl) : [
//   (->
//    [tyA : (U #l kan)]
//    (IsProp (IsSet tyA))
//   )
//  ] by [
//   ?hole
// ].

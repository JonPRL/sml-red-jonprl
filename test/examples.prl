Thm BoolTest : [ 
  (-> wbool wbool)
] by [
  lam x. if x then `tt else `ff
].

// RedPRL 

Thm PathTest : [
  (path {_} S1 base base)
] by [
  <x> `(loop x)
].

Thm LowLevel : [
  (->
    (-> wbool wbool)
    wbool)
] by [
  fresh f <- auto;
  fresh x, x/eq <- elim f;
  [ `tt, hyp x]
].

Extract LowLevel.

Thm FunElimTest : [
  (->
    (-> wbool wbool)
    wbool)
] by [
  lam f. let x = f {`tt}. hyp x
].

Thm S1ElimTest : [ (-> S1 S1) ] by [
  lam s.
    case s of
       base => `base
     | loop x => `(loop x)
].

Tac Try(#t : tac) = [
  #t || id
].

// Useful for stepping through a proof RedPRL completes automatically, to see
// what is being done.
Tac TryStep = [ auto-step || id ].

Thm ApEqTest : [
  (-> 
   [f : (-> wbool wbool)]
   (path {_} wbool ($ f tt) ($ f tt)))
] by [
  lam f. <_> `($ ,f tt)
].

Def BoolEta(#M) = [
  (wbool-rec [a] wbool #M tt ff)
].

Print BoolEta.

// Let's prove the existence of a path between the identity function on booleans, and the
// function that takes a boolean to a vacuous if statement.
//
// The most fun way to use RedPRL is interactively! We will write our proof in the development
// calculus. The advantage of this style of proof is that we can leave holes, and interactively figure out
// what we need to do.
//
Thm PathTest2 : [
  (path 
    {_} (-> wbool wbool)
    (lam [b] b)
    (lam [b] (BoolEta b)))
] by [
  <x> lam b.
    let c : [(path {_} wbool ,b (BoolEta ,b))] =
      if b then <y> `tt else <y> `ff.
    let d = c @ &x.
    hyp d
].

// It turns out that it is just as good to figure out what the witness program for this path is
// by hand, and then tell RedPRL to try and prove that it does in fact witness this path.
// This approach is not preferred, because it is not interactive: you must know ahead of time
// the entirety of the program, and cannot take advantage of types in order to guide its
// construction, or even synthesize part of it.
Thm PathTest3 : [
  (path 
    {_} (-> wbool wbool)
    (lam [b] b)
    (lam [b] (BoolEta b)))
] by [
  // I'm surprised that RedPRL can typecheck this properly! Quite encouraging.
  `(abs {x} 
    (lam [b]
     (@ (wbool-rec [b] (path {_} wbool b (BoolEta b)) b (abs {_} tt) (abs {_} ff))
        x)))
].

Print PathTest3.

Thm PairTest : [ (* [a : S1] (path {_} S1 a base)) ] by [
  < `base
  , <x> `(loop x)
  >
].


Def SNot = [
  (lam [x] (if x ff tt))
].

Def Cmp(#f; #g) = [
  (lam [x] ($ #f ($ #g x)))
].


Def MyLoop{x:dim}(#m) = [
  (pair #m (loop x))
].

Def Test = [
  ({MyLoop 0} (loop 1))
].

Print Test.

Thm StrictBoolTest : [ SNot = (Cmp SNot (Cmp SNot SNot)) in (-> bool bool) ] by [
  auto
].

Thm Not : [(-> [_ : wbool] wbool)] by [
  lam x. if x then `ff else `tt
].

Thm FunExt(#A; #B) : [
  type/A : #A type,
  type/B : #B type
  >>
  (->
   [f : (-> #A #B)]
   [g : (-> #A #B)]
   [p : (-> [y : #A] (path {_} #B ($ f y) ($ g y)))]
   (path {_} (-> #A #B) f g))
] by [
  lam f. lam g. lam p.
    <i> lam a. let q = p hyp a. let qi = q @ &i. hyp qi
].

Print FunExt.


Tac FunExtTac(#A; #B; #F; #G) = [
  let p : [(-> [x : #A] (path {_} wbool ($ #F x) ($ #G x)))] = {}.
  <i> lam a. let q = p hyp a. let qi = q @ &i. hyp qi
].

Thm NotNotPath : [(path {_} (-> wbool wbool) (Cmp Not Not) (lam [x] x))] by [
  (FunExtTac wbool wbool (Cmp Not Not) (lam [x] x));
  lam x. if x then <_> `tt else <_> `ff
].

Extract NotNotPath.
Print FunExtTac.
Print NotNotPath.

Thm Singleton : [(* [x : wbool] (path {_} wbool x tt))] by [
  < `tt, <x> `tt >
].


Thm PathElimTest : [(-> (path {_} bool tt tt) bool)] by [
  lam x. let y = x @ &0. hyp y
].

Print PathElimTest.
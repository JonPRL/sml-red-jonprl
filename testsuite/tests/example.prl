// All forms are declaration are elaborated into definitions of operators
// of a particular sort along with computation rules which are available
// to Red JonPRL's evaluator.

Tac try(T : tac) = [
  T || id
].

// Tacticals are easily defined from within JonPRL's computation system.
// Here are a few examples:
Tac repeat(T : tac) = [
  rec R. {
    try(progress(T); R)
  }
].

Tac bang = [
  repeat(normalize; auto)
].


Sym testsymdecl : exp.


Tac complete(T : tac) = [
  T; fail
].


Record MonoidStruct(i : lvl) = {
  car : Univ(i),
  unit : car,
  op : fun(car; fun(car; car))
}.


Record MonoidLaws(M : exp) = {
  lid : dfun(M.car; [x]. =((M.op) (M.unit) x; x; M.car)),
  rid : dfun(M.car; [x]. =((M.op) x (M.unit); x; M.car)),
  assoc : dfun(M.car; [x]. dfun(M.car; [y]. dfun(M.car; [z]. =((M.op) x ((M.op) y z); (M.op) ((M.op) x y) z; M.car))))
}.


Def Monoid(i : lvl) : exp = [
  { M : MonoidStruct(i) | MonoidLaws(M) }
].

Thm MonoidStructWf(i : lvl) : [member(MonoidStruct(i); Univ(lsuc(i)))] by [
  bang; cumulativity;
  chk-inf; bang
].


Def Unit : exp = [
  ~(Ax; Ax)
].


// We can define Sigma types directly as records.
Record Sg(A : exp, B : [exp].exp) = {
  fst : A,
  snd : B[fst]
}.


Thm symgenTest : [~(nu{lbl}({l}. {l = Unit}.l); Unit)] by [
  bang
].

Sym yes : exp.
Sym no : exp.

Thm symgenTest2 : [~(nu({a}. nu({b}. ifeq('a; 'b; 'yes; 'no))); 'no)] by [
  ceval
].

Thm symgenTest3 : [nu({a}. nu({b}. ~(ifeq('a; 'b; 'yes; 'no); 'no)))] by [
  eval; ceval; csym; ceval
].

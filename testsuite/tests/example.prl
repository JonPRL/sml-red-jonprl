// All forms are declaration are elaborated into definitions of operators
// of a particular sort along with computation rules which are available
// to Red JonPRL's evaluator.

// Tacticals are easily defined from within JonPRL's computation system.
// Here are a few examples:
Tac repeat(T : tac) = [
  rec R. {
    T; R
  }
].



Tac complete(T : tac) = [
  T; fail
].

Def id(M : exp) : exp = [
  M
].

// In addition, operators can take symbolic parameters (in brackets, as in PFPL);
// furthermore, the arguments of operators may bind both symbols (in braces) and
// variables (in brackets). Arguments of an operator are treated as metavariables
// of the appropriate valence in the body of the definiens.
Def welp[a:exp](E : {exp}[triv].exp) : exp = [
  E{a}[Ax]
].


// Theorems may be both parametric and general. Let's prove an easy theorem by exploiting the
// computation rule for [welp].
Thm example[a:exp] : [~(Base; welp[a]({b}[x].Base))] : triv by [
  csym;
  ceval
].

// Every proof is related to the evidence semantics of Computational Type Theory by
// an "extract"; a theorem in JonPRL, like every other declaration form, is a
// definitional extension of the ambient signature, and is elaborated so as to include
// its extract. There is a non-canonical operator that can be used to pull out the
// extract of a theorem. We can prove that the extract of the [example] theorem is
// the trivial term [Ax]:
Thm extractTest[z:exp] : [~{triv}(extract{triv}(example[z]); Ax)] : triv by [
  ceval
].

Thm univTest(i : lvl) : [=(Univ(i); Univ(i); Univ(lsuc(i)))] : triv by [
  eq
].


Thm baseTypeEq(i : lvl) : [=(Base; Base; Univ(i))] : triv by [
  eq
].

Tac crefl = [
  cstep{0}
].

Thm baseMemberEq : [={triv}(Ax; Ax; Base{triv})] : triv by [
  eq; crefl
].


// Species, or set comprehensions, are types that restrict the inhabitants of
// a type by a predicate. Because this is a multi-sorted type theory, we must specify
// what syntactic sort is being refined by the type being restricted. In this example,
// we are restricting the [exp] sort, which contains type expressions.
Def speciesExample : exp = [
  { x : Base{exp} | ~{exp}(x; Base{triv}) }
].

Thm speciesTest(i : lvl) : [member{triv}(Ax; {x : Base{triv} | ~{triv}(x; Ax) })] : triv by [
  eval-goal;
  x:triv <- eq;
  // note how a universe level did not need to be supplied to the
  // [eq] tactic; instead, a subgoal for a universe level is generated,
  // and it is propagated to the following type-functionality subgoal using
  // Dependent LCF.
  [ eq
  , intro
  , witness{lvl} i; eval-goal; eq
  , eval-goal; eq;
    #0 {
      y:triv <- elim[x:triv];
      hyp[y:triv]
    }
  ];
  crefl
].

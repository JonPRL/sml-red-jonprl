// POPL 2018 tutorial, part one
// January 8, 2018

quit.

theorem Not : 
  (-> bool bool)
by {
  ?
}.

quit.

print Not.



















theorem NotNot : 
  (->
   [b : bool]
   (= bool ($ Not ($ Not b)) b))
by {
  ?
}.

quit.

print NotNot.



















theorem RespectEquality : 
  (->
   [family : (-> [b : bool] (U 0))]
   [b : bool]
   ($ family b)
   ($ family ($ Not ($ Not b))))
by {
  ?
}.

quit.

print RespectEquality.



















theorem EqualityIrrelevant : 
  (=
    (-> [b : bool] (= bool ($ Not ($ Not b)) b))
    NotNot
    (lam [b] ax))
by {
  ?
}.

quit.

print EqualityIrrelevant.



















theorem FunToPair : 
  (->
   [ty : (U 0 kan)]
   (-> bool ty)
   (* ty ty))
by {
  lam ty fun =>
  {`($ fun tt), `($ fun ff)}
}.

// {{{ Univalence

define HasAllPathsTo (#C,#c) = (-> [c' : #C] (path [_] #C c' #c)).
define IsContr (#C) = (* [c : #C] (HasAllPathsTo #C c)).
define Fiber (#A,#B,#f,#b) = (* [a : #A] (path [_] #B ($ #f a) #b)).
define IsEquiv (#A,#B,#f) = (-> [b : #B] (IsContr (Fiber #A #B #f b))).
define Equiv (#A,#B) = (* [f : (-> #A #B)] (IsEquiv #A #B f)).

theorem WeakConnection(#l:lvl) : 
  (->
   [ty : (U #l hcom)]
   [a b : ty]
   [p : (path [_] ty a b)]
   (path [i] (path [_] ty (@ p i) b) p (abs [_] b)))
by {
  (lam ty a b p =>
    abs i j =>
      `(hcom 1~>0 ty b
        [i=0 [k] (hcom 0~>j ty (@ p k) [k=0 [w] (@ p w)] [k=1 [_] b])]
        [i=1 [k] (hcom 0~>1 ty (@ p k) [k=0 [w] (@ p w)] [k=1 [_] b])]
        [j=0 [k] (hcom 0~>i ty (@ p k) [k=0 [w] (@ p w)] [k=1 [_] b])]
        [j=1 [k] (hcom 0~>1 ty (@ p k) [k=0 [w] (@ p w)] [k=1 [_] b])]))
}.

theorem FunToPairIsEquiv : 
  (->
   [ty : (U 0 kan)]
   (IsEquiv (-> bool ty) (* ty ty) ($ FunToPair ty)))
by {
  lam ty pair =>
  { { lam b => if b then `(!proj1 pair) else `(!proj2 pair)
    , abs _ => `pair }
  , unfold Fiber;
    lam {fun,p} =>
      fresh x:dim -> refine path/intro; [
        {lam b => if b then `(!proj1 (@ p x)) else `(!proj2 (@ p x)),
         abs y =>
           `(@ ($ (WeakConnection #lvl{0}) (* ty ty) ($ FunToPair ty fun) pair p) x y)
        }
      ];

      [ symmetry; refine record/eq/tuple;
        [ refine fun/eq/eta; #1{auto}; auto; symmetry;
          claim p/0 : [(@ p 0) = ($ FunToPair ty fun) in (* ty ty)] by [ auto ];
          auto;
          [ fresh h -> rewrite p/0; [`(= ty (! proj1 h) ($ fun tt))]
          , fresh h -> rewrite p/0; [`(= ty (! proj2 h) ($ fun ff))]
          ]
        ]; auto

       , refine record/eq/tuple;
         [ auto
         , refine path/eq/abs;
           [ symmetry; unfold WeakConnection;
             reduce at right;
             refine record/eq/eta; #1 {auto};
             refine record/eq/tuple; #2 {auto};
             [ symmetry; refine hcom/eq/tube; [auto, auto, auto, auto, auto, auto, auto, auto]
             , symmetry; refine hcom/eq/tube; [auto, auto, auto, auto, auto, auto, auto, auto]
             ]
           ]
         ];
         auto
      ]
  }
}.

theorem PathFunToPair : 
  (->
   [ty : (U 0 kan)]
   (path [_] (U 0 kan) (-> bool ty) (* ty ty)))
by {
  lam ty => abs x =>
  `(V x (-> bool ty) (* ty ty)
    (tuple [proj1 ($ FunToPair ty)] [proj2 ($ FunToPairIsEquiv ty)]))
}.

// }}}

quit.

print PathFunToPair.



















theorem RespectPaths : 
  (->
   [ty : (U 0 kan)]
   (-> bool ty)
   (* ty ty))
by {
  lam ty fun =>
  `(coe 0~>1 [x] (@ ($ PathFunToPair ty) x) fun)
}.

quit.

print RespectPaths.



















theorem ComputeCoercion : 
  (=
   (* bool bool)
   ($ RespectPaths bool (lam [b] b))
   (tuple [proj1 tt] [proj2 ff]))
by {
  auto
}.

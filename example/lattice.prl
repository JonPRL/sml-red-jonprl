Thm Lattice(#l:lvl) : [(U (++ #l))] by [
  `(record
    [car : (U #l)]
    [meet join : (-> car car car)]
    [meet/sym :
     (-> [a b : car] 
         (= car ($ meet a b) ($ meet b a)))]
    [join/sym : 
     (-> [a b : car]
         (= car ($ join a b) ($ join b a)))]
    [meet/assoc : 
     (-> [a b c : car]
         (= car 
            ($ meet ($ meet a b) c)
            ($ meet a ($ meet b c))))]
    [join/assoc : 
     (-> [a b c : car]
         (= car 
            ($ join ($ join a b) c)
            ($ join a ($ join b c))))]
    [absorb/join/meet :
     (-> [a b : car]
         (= car ($ join a ($ meet a b)) a))]
    [absorb/meet/join :
     (-> [a b : car]
         (= car ($ meet a ($ join a b)) a))])
].


Tac IdemTac(#car, #meet, #join, #ajm, #amj) = [
  lam a =>
    claim p : [ (= #car a ($ #meet a ($ #join a ($ #meet a a)))) ] by [
      symmetry;
      use #amj [`a, use #meet [`a, `a]]
    ]; 

    fresh h -> rewrite p at right;
    [ `h
    , let q = #ajm [`a, `a];
      fresh h -> rewrite q at left; [`($ #meet a h)];
      auto; assumption
    ]; auto
].

Thm Idem/meet(#l:lvl) : [
  (-> 
   [l : (Lattice #l)]
   [a : (!car l)]
   (= (!car l) ($ (!meet l) a a) a))
] by [
  lam {car = car, meet = meet, join = join, absorb/join/meet = ajm, absorb/meet/join = amj} =>
    (IdemTac car meet join ajm amj)
].

Thm Idem/join(#l:lvl) : [
  (-> 
   [l : (Lattice #l)]
   [a : (!car l)]
   (= (!car l) ($ (!join l) a a) a))
] by [
  lam {car = car, meet = meet, join = join, absorb/join/meet = ajm, absorb/meet/join = amj} =>
    (IdemTac car join meet amj ajm)
].

Print Idem/join.

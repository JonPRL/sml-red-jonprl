structure Ast = RedPrlAst
open Ast

structure P =
struct
  open RedPrlParamData
  open RedPrlParameterTerm
end

structure O = RedPrlOpData

fun makeFunApp (m, n) =
  Ast.$$ (O.MONO O.AP, [\ (([],[]), m), \ (([],[]), n)])

fun makeFunApps [x] = x
  | makeFunApps (x :: xs) = makeFunApp (makeFunApps xs, x)
  | makeFunApps [] = raise Fail "makeFunApps"


%%
%header (functor RedPrlLrValsFun (structure Token : TOKEN))

%term
   EOF
 | IDENT of string
 | COLON
 | LPAREN
 | RPAREN
 | RBRACKET
 | LBRACKET
 | LSQUARE
 | RSQUARE
 | LTEQUALS
 | DOT
 | APOSTROPHE
 | ZERO
 | ONE
 | HASH
 | SEMI
 | COMMA
 | LAMBDA

%nonterm
   start of ast
 | term  of ast
 | binder of symbol list * symbol list
 | binding of ast abs
 | bindings of ast abs list
 | symbols of symbol list
 | param of string param
 | params of string param list
 | terms of ast list
 | metavar of string
 | metavarArgs of string param list * ast list
 | operator of string operator
 | funapp of ast list

%verbose
%pos Coord.t
%start start
%eop EOF
%noshift EOF
%name RedPrl
%arg (fileName) : string
%%

start : term (term)

param
  : IDENT (P.VAR IDENT)
  | ZERO (P.APP P.DIM0)
  | ONE (P.APP P.DIM1)

params
  : ([])
  | param ([param])
  | params COMMA param (params @ [param])

symbols
  : ([])
  | IDENT ([IDENT])
  | symbols COMMA IDENT (symbols @ [IDENT])

terms
  : ([])
  | term ([term])
  | terms COMMA term (terms @ [term])

binder
  : LBRACKET symbols RBRACKET LSQUARE symbols RSQUARE DOT (symbols1, symbols2)
  | LBRACKET symbols RBRACKET DOT (symbols, [])
  | LSQUARE symbols RSQUARE DOT ([], symbols)
  | ([], [])

binding
  : binder term (\ (binder, term))

bindings
  : ([])
  | binding ([binding])
  | bindings SEMI binding (bindings @ [binding])

metavarArgs
  : LBRACKET params RBRACKET LSQUARE terms RSQUARE (params, terms)
  | LBRACKET params RBRACKET (params, [])
  | LSQUARE terms RSQUARE ([], terms)
  | ([], [])

operator
  : LAMBDA (O.MONO O.LAM)

metavar
  : HASH IDENT (IDENT)

funapp
  : term ([term])
  | term funapp (funapp @ [term])

term
  : operator LPAREN bindings RPAREN (Ast.$$ (operator, bindings))
  | operator (Ast.$$ (operator, []))
  | metavar metavarArgs (Ast.$$# (metavar, metavarArgs))
  | IDENT (`` IDENT)
  | funapp (makeFunApps funapp)


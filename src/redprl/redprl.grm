structure Ast = RedPrlAst
structure Ar = RedPrlArity
structure Vl = Ar.Vl

open Ast

structure P =
struct
  open RedPrlParamData
  open RedPrlParameterTerm
end

structure O = RedPrlOpData

structure Tac =
struct
  type binding = (string * P.param_sort) list * ast
  infix $$ $ \

  fun makeSeq mt (us : (string * P.param_sort) list) t =
    let
      val (syms, sorts) = ListPair.unzip us
    in
      O.MONO (O.TAC_SEQ sorts) $$ [([],[]) \ mt, (syms,[]) \ t]
    end

  fun multitacToTac tm =
    case out tm of
       O.MONO O.MTAC_ALL $ [_ \ t] => t
     | _ => makeSeq tm [] (O.MONO O.RULE_ID $$ [])

  val rec compileScript =
    fn [] => O.MONO O.RULE_ID $$ []
     | [([], tac)] => multitacToTac tac
     | [(us, tac)] => makeSeq tac us (O.MONO O.RULE_ID $$ [])
     | (us, tac) :: ts => makeSeq tac us (compileScript ts)
end

%%
%header (functor RedPrlLrValsFun (structure Token : TOKEN))

%term
   EOF
 | IDENT of string
 | NUMERAL of int
 | COLON
 | LANGLE | RANGLE
 | LPAREN | RPAREN
 | RBRACKET | LBRACKET
 | LSQUARE | RSQUARE
 | EQUALS
 | DOT
 | APOSTROPHE
 | HASH
 | SEMI
 | COMMA
 | LAMBDA
 | SQUIGGLE
 | SQUIGGLE_ARROW
 | RIGHT_ARROW | LEFT_ARROW
 | BACK_TICK | AT_SIGN | PIPE | PERCENT

 | HCOM | COE | UNIV | BOOL | TT | FF | IF | PATHS | LOOP | BASE | S1

 | FUN_APP

 | DIM | EXN | LBL | LVL | HYP
 | EXP | TAC

 | CMD_PRINT
 | DCL_DEF | DCL_TAC | DCL_THM
 | BY | IN

 | TAC_REC | TAC_PROGRESS
 | RULE_ID | RULE_AUTO | RULE_EVAL_GOAL | RULE_CEQUIV_REFL | RULE_HYP | RULE_ELIM | RULE_HEAD_EXP

 | JDG_TRUE | JDG_TYPE | JDG_SYNTH

%nonassoc SQUIGGLE
%right LEFT_ARROW RIGHT_ARROW PIPE
%left FUN_APP AT_SIGN


%nonterm
   start of Signature.sign

   (* a type-theoretic term, excluding function application *)
 | rawTerm of ast
   (* a type-theoretic term, including function application *)
 | atomicRawTerm of ast

   (* a type-theoretic term, annotated with source position *)
 | term of ast
 | terms of ast list
 | funapp of ast

   (* abt abstractions *)
 | binder of symbol list * symbol list
 | binding of ast abs
 | bindings of ast abs list

 | symbols of symbol list
 | param of string param
 | params of string param list

   (* the extents of a Kan composition *)
 | extents of string param list
   (* the direction of a coercion of Kan composition *)
 | dir of string param * string param

   (* metavariables and metavariable applications *)
 | metavar of string
 | metavarArgs of string param list * ast list

 | operator of string operator
 | customOpParams of (string param * P.param_sort option) list
 | psort of P.param_sort
 | sort of O.sort
 | psorts of P.param_sort list
 | sorts of O.sort list
 | bindingSig of P.param_sort list * O.sort list
 | valence of Ar.valence

 | rawJudgment of ast
 | judgment of ast

 | rawTactic of ast
 | tactic of ast
 | tactics of ast list
 | tacticBinding of Tac.binding
 | tacticBindings of Tac.binding list
 | hypBindings of (string * P.param_sort) list
 | rawMultitac of ast
 | multitac of ast
 | atomicRawTac of ast
 | atomicTac of ast

 | declArgument of metavariable * Ar.valence
 | declArguments of string Signature.arguments
 | declArgumentsParens of string Signature.arguments
 | declParam of string * P.param_sort
 | declParams of string Signature.params
 | declParamsBrackets of string Signature.params

   (* a declaration in a RedPRL signature *)
 | rawDecl of string * Signature.src_decl
   (* a declaration, annotated with source position *)
 | decl of string * (Signature.src_decl * Pos.t option)
   (* a RedPRL signature *)
 | rawCmd of Signature.src_cmd
 | cmd of Signature.src_cmd * Pos.t
 | sign of Signature.sign

%verbose
%pos (string -> Coord.t)
%start start
%eop EOF
%noshift EOF
%name RedPrl
%arg (fileName) : string
%%

start : sign (sign)

psort
  : DIM (P.DIM)
  | EXN (P.EXN)
  | LBL (P.LBL)
  | LVL (P.LVL)
  | HYP (P.HYP)

sort
  : EXP (O.EXP)
  | TAC (O.TAC)

sorts
  : ([])
  | sort ([sort])
  | sort COMMA sorts (sort :: sorts)

psorts
  : ([])
  | psort ([psort])
  | psort COMMA psorts (psort :: psorts)

bindingSig
  : LBRACKET psorts RBRACKET LSQUARE sorts RSQUARE DOT (psorts, sorts)
  | LBRACKET psorts RBRACKET DOT (psorts, [])
  | LSQUARE sorts RSQUARE DOT ([], sorts)
  | ([], [])

valence
  : bindingSig sort ((bindingSig, sort))

param
  : IDENT (P.VAR IDENT)
  | NUMERAL (P.APP (case NUMERAL of 0 => P.DIM0 | 1 => P.DIM1 | _ => raise Fail "Invalid dimension constant"))
  | param APOSTROPHE (P.APP (P.LVL_SUCC param))

params
  : ([])
  | param ([param])
  | param COMMA params (param :: params)

extents
  : param ([param])
  | param COMMA extents (param :: extents)

symbols
  : ([])
  | IDENT ([IDENT])
  | IDENT COMMA symbols (IDENT :: symbols)

terms
  : ([])
  | term ([term])
  | term COMMA terms (term :: terms)
  | PERCENT LBRACKET tactic RBRACKET COMMA terms (tactic :: terms)

binder
  : LBRACKET symbols RBRACKET LSQUARE symbols RSQUARE DOT (symbols1, symbols2)
  | LBRACKET symbols RBRACKET DOT (symbols, [])
  | LSQUARE symbols RSQUARE DOT ([], symbols)
  | ([], [])

binding
  : binder term (\ (binder, term))
  | binder PERCENT LBRACKET tactic RBRACKET (\ (binder, tactic))

bindings
  : ([])
  | binding ([binding])
  | binding SEMI bindings (binding :: bindings)

metavarArgs
  : LBRACKET params RBRACKET LSQUARE terms RSQUARE (params, terms)
  | LBRACKET params RBRACKET (params, [])
  | LSQUARE terms RSQUARE ([], terms)
  | ([], [])

operator
  : LAMBDA (O.MONO O.LAM)
  | HCOM LBRACKET extents SEMI dir RBRACKET (O.POLY (O.HCOM (O.TAG_NONE, extents, dir)))
  | COE LBRACKET dir RBRACKET (O.POLY (O.COE (O.TAG_NONE, dir)))
  | IDENT customOpParams (O.POLY (O.CUST (IDENT, customOpParams, NONE)))
  | IF (O.MONO O.IF)
  | PATHS (O.MONO O.ID_TY)

customOpParams
  : LBRACKET params RBRACKET (List.map (fn x => (x, NONE)) params)
  | ([])

metavar
  : HASH IDENT (IDENT)

dir
  : param SQUIGGLE_ARROW param ((param1, param2))

term : rawTerm (annotate (Pos.pos (rawTerm1left fileName) (rawTerm1right fileName)) rawTerm)

atomicRawTerm
  : LPAREN term RPAREN (term)
  | operator LPAREN bindings RPAREN (Ast.$$ (operator, bindings))
  | metavar metavarArgs (Ast.$$# (metavar, metavarArgs))
  | BACK_TICK IDENT (Ast.$$ (O.POLY (O.HYP_REF IDENT), []))
  | IDENT (`` IDENT)
  | term RIGHT_ARROW term (Ast.$$ (O.MONO O.FUN, [\ (([],[]), term1), \ (([],[]), term2)]))
  | LPAREN IDENT COLON term RPAREN RIGHT_ARROW term (Ast.$$ (O.MONO O.DFUN, [\ (([],[]), term1), \ (([],[IDENT]), term2)]))
  | UNIV LBRACKET param RBRACKET (Ast.$$ (O.POLY (O.UNIV param), []))
  | BOOL (Ast.$$ (O.MONO O.BOOL, []))
  | TT (Ast.$$ (O.MONO O.TRUE, []))
  | FF (Ast.$$ (O.MONO O.FALSE, []))
  | S1 (Ast.$$ (O.MONO O.S1, []))
  | BASE (Ast.$$ (O.MONO O.BASE, []))
  | LOOP LBRACKET param RBRACKET (Ast.$$ (O.POLY (O.LOOP param), []))
  | LANGLE IDENT RANGLE term (Ast.$$ (O.MONO O.ID_ABS, [\ (([IDENT],[]), term)]))
  | term AT_SIGN param %prec AT_SIGN (Ast.$$ (O.POLY (O.ID_AP param), [\ (([],[]), term)]))

rawTerm
  : term atomicRawTerm %prec FUN_APP (Ast.$$ (O.MONO O.AP, [\ (([],[]), term), \ (([],[]), atomicRawTerm)]))
  | atomicRawTerm (atomicRawTerm)

rawJudgment
  : term JDG_TRUE (Ast.$$ (O.MONO O.JDG_TRUE, [\ (([],[]), term)]))
  | term JDG_TYPE (Ast.$$ (O.MONO O.JDG_TYPE, [\ (([],[]), term)]))
  | term JDG_SYNTH (Ast.$$ (O.MONO O.JDG_SYNTH, [\ (([],[]), term)]))
  | term SQUIGGLE term (Ast.$$ (O.MONO O.JDG_CEQ, [\ (([],[]), term1), \ (([],[]), term2)]))
  | term EQUALS term COLON term (Ast.$$ (O.MONO O.JDG_EQ, [\ (([],[]), term1), \ (([],[]), term2), \ (([],[]), term3)]))
  | term COLON term (Ast.$$ (O.MONO O.JDG_MEM, [\ (([],[]), term1), \(([],[]), term2)]))

judgment : rawJudgment (annotate (Pos.pos (rawJudgment1left fileName) (rawJudgment1right fileName)) rawJudgment)

atomicRawTac
  : RULE_ID (Ast.$$ (O.MONO O.RULE_ID, []))
  | RULE_AUTO (Ast.$$ (O.MONO O.RULE_AUTO, []))
  | RULE_EVAL_GOAL (Ast.$$ (O.MONO O.RULE_EVAL_GOAL, []))
  | RULE_CEQUIV_REFL (Ast.$$ (O.MONO O.RULE_CEQUIV_REFL, []))
  | RULE_HYP LBRACKET IDENT RBRACKET (Ast.$$ (O.POLY (O.RULE_HYP IDENT), []))
  | RULE_ELIM LBRACKET IDENT RBRACKET (Ast.$$ (O.POLY (O.RULE_ELIM IDENT), []))
  | APOSTROPHE LBRACKET term RBRACKET (Ast.$$ (O.MONO O.RULE_WITNESS, [\ (([],[]), term)]))
  | RULE_HEAD_EXP (Ast.$$ (O.MONO O.RULE_HEAD_EXP, []))
  | tactic PIPE tactic %prec PIPE (Ast.$$ (O.MONO O.TAC_ORELSE, [\ (([],[]), tactic1), \ (([],[]), tactic2)]))
  | TAC_REC IDENT IN LBRACKET tactic RBRACKET (Ast.$$ (O.MONO O.TAC_REC, [\ (([],[IDENT]), tactic)]))
  | TAC_PROGRESS LBRACKET tactic RBRACKET (Ast.$$ (O.MONO O.TAC_PROGRESS, [\ (([], []), tactic)]))

  | LAMBDA IDENT LBRACKET tactic RBRACKET (Ast.$$ (O.MONO O.DEV_FUN_INTRO, [\ (([IDENT], []), tactic)]))
  | LANGLE IDENT RANGLE LBRACKET tactic RBRACKET (Ast.$$ (O.MONO O.DEV_PATH_INTRO, [\ (([IDENT], []), tactic)]))

  | operator LPAREN bindings RPAREN (Ast.$$ (operator, bindings))
  | metavar metavarArgs (Ast.$$# (metavar, metavarArgs))
  | IDENT (`` IDENT)
  | LPAREN tactic RPAREN tactic (tactic)
  | term (term)

atomicTac : atomicRawTac (annotate (Pos.pos (atomicRawTac1left fileName) (atomicRawTac1right fileName)) atomicRawTac)

rawMultitac
  : LSQUARE tactics RSQUARE (Ast.$$ (O.MONO (O.MTAC_EACH (List.length tactics)), List.map (fn t => \ (([],[]), t)) tactics))
  | HASH NUMERAL LBRACKET tactic RBRACKET (Ast.$$ (O.MONO (O.MTAC_FOCUS NUMERAL), [\ (([],[]), tactic)]))
  | atomicTac (Ast.$$ (O.MONO O.MTAC_ALL, [\ (([],[]), atomicTac)]))

multitac : rawMultitac (annotate (Pos.pos (rawMultitac1left fileName) (rawMultitac1right fileName)) rawMultitac)


hypBindings
  : IDENT ([(IDENT, P.HYP)])
  | IDENT COMMA hypBindings ((IDENT, P.HYP) :: hypBindings)

tacticBinding
  : hypBindings LEFT_ARROW multitac %prec LEFT_ARROW (hypBindings, multitac)
  | multitac ([], multitac)

tacticBindings
  : tacticBinding ([tacticBinding])
  | tacticBinding SEMI tacticBindings (tacticBinding :: tacticBindings)
  | ([])

rawTactic
  : tacticBindings (Tac.compileScript tacticBindings)

tactic : rawTactic (annotate (Pos.pos (rawTactic1left fileName) (rawTactic1right fileName)) rawTactic)

tactics
  : ([])
  | tactic ([tactic])
  | tactic COMMA tactics (tactic :: tactics)

declArgument
  : metavar COLON valence ((metavar, valence))

declArguments
  : ([])
  | declArgument ([declArgument])
  | declArgument SEMI declArguments (declArgument :: declArguments)

declArgumentsParens
  : LPAREN declArguments RPAREN (declArguments)
  | ([])

declParam
  : IDENT COLON psort (IDENT, psort)

declParams
  : ([])
  | declParam ([declParam])
  | declParam COMMA declParams (declParam :: declParams)

declParamsBrackets
  : LBRACKET declParams RBRACKET (declParams)
  | ([])

rawDecl
  : DCL_DEF IDENT declParamsBrackets declArgumentsParens COLON sort EQUALS LSQUARE term RSQUARE
      (IDENT, Signature.DEF {arguments = declArgumentsParens, params = declParamsBrackets, definiens = term, sort = sort})
  | DCL_TAC IDENT declParamsBrackets declArgumentsParens EQUALS LSQUARE tactic RSQUARE
      (IDENT, Signature.TAC {arguments = declArgumentsParens, params = declParamsBrackets, script = tactic})
  | DCL_THM IDENT declParamsBrackets declArgumentsParens COLON LSQUARE judgment RSQUARE BY LSQUARE tactic RSQUARE
      (IDENT, Signature.THM {arguments = declArgumentsParens, params = declParamsBrackets, goal = judgment, script = tactic})

decl : rawDecl (#1 rawDecl, (#2 rawDecl, SOME (Pos.pos (rawDecl1left fileName) (rawDecl1right fileName))))

rawCmd
  : CMD_PRINT IDENT (Signature.PRINT IDENT)

cmd : rawCmd (rawCmd, (Pos.pos (rawCmd1left fileName) (rawCmd1right fileName)))

sign
  : (Signature.empty)
  | sign decl DOT (Signature.insert sign (#1 decl) (#2 decl))
  | sign cmd DOT (Signature.command sign cmd)

structure Ast = RedPrlAst
structure Ar = RedPrlArity
structure Vl = Ar.Vl

open Ast

structure E = RedPrlError
structure K = RedPrlKind
structure O = RedPrlOperator
structure AJ = AtomicJudgment
structure TP = TermPrinter
structure ML = MlExtSyntax
structure Rx = RedExpr

val ppIntInf = Fpp.text o IntInf.toString

(* helper function *)
(* XXX rewrite this file to use this function more *)
fun \\ (t : ast) = Ast.\ ([], t)

fun makeCustom (opid, bindings) =
  Ast.$$ (O.CUST (opid, NONE), bindings)

fun makeDim pos : IntInf.int -> ast =
  fn 0 => Ast.$$ (O.DIM0, [])
   | 1 => Ast.$$ (O.DIM1, [])
   | i => E.raiseAnnotatedError (pos, E.INVALID_DIMENSION (ppIntInf i))

structure Tac =
struct
  infix $$ $ \

  fun makeSeq mt mt' =
    let
    in
      O.MTAC_SEQ $$ [[] \ mt, [] \ mt']
    end

  fun multitacToTac mt =
    case out mt of
       O.MTAC_ALL $ [_ \ t] => t
     | _ => setAnnotation (getAnnotation mt) (O.TAC_MTAC $$ [[] \ mt])

  fun tacToMultitac t =
    case out t of
       O.TAC_MTAC $ [_ \ mt] => mt
     | _ => setAnnotation (getAnnotation t) (O.MTAC_ALL $$ [[] \ t])

  fun orElse (t1, t2) =
    multitacToTac (O.MTAC_ORELSE $$ [[] \ tacToMultitac t1, [] \ tacToMultitac t2])

  fun then_ (t1, t2) =
    multitacToTac (makeSeq (tacToMultitac t1) (tacToMultitac t2))

  val autoMtac = O.MTAC_AUTO $$ []
  val autoTac = multitacToTac autoMtac

  fun exact m =
    O.RULE_EXACT $$ [[] \ m]

  val fail = O.TAC_FAIL $$ []

  fun try t =
    orElse (t, O.TAC_ID $$ [])

  fun exactAuto m =
    then_ (exact m, try (then_ (autoTac, fail)))

  fun makeMatch term clauses =
    let
      fun makeClause t1 t2 = O.DEV_MATCH_CLAUSE $$ [[] \ t1, [] \ t2]
      val clauseArgs = List.map (fn (xs, (t1, t2)) => xs \ makeClause t1 t2) clauses
      val ns = List.map (List.length o #1) clauses
    in
      O.DEV_MATCH ns $$ ([] \ term) :: clauseArgs
    end

  val inversion =
    O.DEV_INVERSION $$ []

  val assumption =
    O.TAC_ASSUMPTION $$ []

end

structure Multi =
struct
  infix $$ $ \

  val addUnderscores = List.map (fn SOME x => x | NONE => "_")

  fun makeLam [] m = m
    | makeLam (x::xs) m = O.LAM $$ [[Option.getOpt (x, "_")] \ makeLam xs m]

  fun makeSpecLam [] m = m
    | makeSpecLam (x::xs) m = O.IND_SPEC_LAM $$ [[Option.getOpt (x, "_")] \ makeSpecLam xs m]

  fun makeApp m ns =
    List.foldl (fn (n, app) => O.APP $$ [[] \ app, [] \ n]) m ns

  fun makeSpecApp m ns =
    List.foldl (fn (n, app) => O.IND_SPEC_APP $$ [[] \ app, [] \ n]) m ns

  fun makeAbs [] m = m
    | makeAbs (u::us) m = O.ABS $$ [[Option.getOpt (u, "_")] \ makeAbs us m]

  fun makeDimApp m ns =
    List.foldl (fn (r, app) => O.DIM_APP $$ [[] \ app, [] \ r]) m ns

  fun makeNat pos i =
    case IntInf.compare (i, 0) of
      GREATER => O.SUCC $$ [[] \ makeNat pos (i - 1)]
    | EQUAL => O.ZERO $$ []
    | LESS => E.raiseAnnotatedError (pos, E.INVALID_NATURAL_NUMBER (ppIntInf i))

  fun makeInt pos i =
    case IntInf.compare (i, 0) of
      LESS => O.NEGSUCC $$ [[] \ makeNat pos ((~ i) - 1)]
    | _ => O.POS $$ [[] \ makeNat pos i]

  datatype 'a typing = DIM | TERM of 'a | IND_SPEC of 'a

  fun flatten (quant : ('a list * 'b typing) list) : ('a * 'b typing) list =
    let
      fun expand (vars, DIM) = List.map (fn v => (v, DIM)) vars
        | expand (vars, TERM term) = List.map (fn v => (v, TERM term)) vars
        | expand (vars, IND_SPEC term) = List.map (fn v => (v, IND_SPEC term)) vars
    in
      ListUtil.concatMap expand quant
    end

  fun makeFunOrLine (x, TERM a) cod =
        O.FUN $$ [[] \ a, [Option.getOpt (x, "_")] \ cod]
    | makeFunOrLine (x, DIM) cod =
        O.LINE $$ [[Option.getOpt (x, "_")] \ cod]

  fun makeFunOrLines (xs, ty) cod =
    List.foldr (fn (x, tm) => makeFunOrLine (x, ty) tm) cod xs

  fun makeIndFamFunOrLine (x, TERM a) cod =
        O.IND_FAM_FUN $$ [[] \ a, [Option.getOpt (x, "_")] \ cod]
    | makeIndFamFunOrLine (x, DIM) cod =
        O.IND_FAM_LINE $$ [[Option.getOpt (x, "_")] \ cod]

  fun makeIndFamFunOrLines (xs, ty) cod =
    List.foldr (fn (x, tm) => makeIndFamFunOrLine (x, ty) tm) cod xs

  fun makeSpecFunOrLine (x, TERM a) cod =
    O.IND_SPECTYPE_FUN $$ [[] \ a, [Option.getOpt (x, "_")] \ cod]

  fun makeSpecFunOrLines (xs, ty) cod =
    List.foldr (fn (x, tm) => makeSpecFunOrLine (x, ty) tm) cod xs

  fun makeConstrFunOrLine (x, TERM a) cod =
        O.IND_CONSTR_FUN $$ [[] \ a, [Option.getOpt (x, "_")] \ cod]
    | makeConstrFunOrLine (x, DIM) cod =
        O.IND_CONSTR_LINE $$ [[Option.getOpt (x, "_")] \ cod]
    | makeConstrFunOrLine (x, IND_SPEC a) cod =
        O.IND_CONSTR_SPEC_FUN $$ [[] \ a, [Option.getOpt (x, "_")] \ cod]

  fun makeConstrFunOrLines (xs, ty) cod =
    List.foldr (fn (x, tm) => makeConstrFunOrLine (x, ty) tm) cod xs

  structure LabelSet = SplaySet (structure Elem = StringOrdered)


  fun checkNoDuplicates pos lbls =
    let
      fun insert (lbl, set) =
        if LabelSet.member set lbl then
          E.raiseAnnotatedError (pos, E.GENERIC [Fpp.text "Duplicate label", Fpp.text lbl])
        else
          LabelSet.insert set lbl
    in
      List.foldl insert LabelSet.empty lbls;
      ()
    end

  fun makeRecordAux pos tbs =
    let
      val fields = ListUtil.mapWithIndex
        (fn (_, (SOME x, TERM ty)) => (x, ty)
          | (i, (NONE, TERM ty)) => (O.indexToLabel i, ty)
          | (_, (_, DIM)) => E.raiseAnnotatedError (pos, E.GENERIC [Fpp.text "No dimension binders in record types."])
          | (_, (_, IND_SPEC _)) => E.raiseAnnotatedError (pos, E.GENERIC [Fpp.text "No specification binders in record types."]))
        (flatten tbs)
      val init = {labels = [], args = []}
      val {labels, args} =
        List.foldl
          (fn ((lbl, ty), {labels, args}) =>
            {labels = labels @ [lbl],
             args = (labels \ ty) :: args})
          init
          fields

      val lbls = labels
      val _ = checkNoDuplicates pos lbls
    in
      (lbls, List.rev args)
    end

  fun makeProd pos tbs =
    let
      val (_, args) = makeRecordAux pos tbs
      val lbls = ListUtil.mapWithIndex (O.indexToLabel o #1) args
    in
      O.RECORD lbls $$ args
    end

  fun makeRecord pos tbs =
    let
      val (lbls, args) = makeRecordAux pos tbs
    in
      O.RECORD lbls $$ args
    end

  fun makeTuple pos fields =
    let
      val (lbls, args) = ListPair.unzip fields
    in
      checkNoDuplicates pos lbls;
      O.TUPLE lbls $$ List.map (fn a => [] \ a) args
    end

  fun makeAnonymousTuple terms =
    let
      val lbls = ListUtil.mapWithIndex (O.indexToLabel o #1) terms
    in
      O.TUPLE lbls $$ List.map (fn a => [] \ a) terms
    end

  fun recordIntro pos fields =
    let
      val (lbls, tacs) = ListPair.unzip fields
    in
      checkNoDuplicates pos lbls;
      O.DEV_RECORD_INTRO lbls $$ List.map (fn tac => [] \ tac) tacs
    end


  fun sigmaIntro tacs =
    let
      val lbls = List.tabulate (List.length tacs, O.indexToLabel)
    in
      O.DEV_RECORD_INTRO lbls $$ List.map (fn tac => [] \ tac) tacs
    end

  fun joinAnnotations (xs : ast list) : Pos.t option =
    case xs of
       [] => NONE
     | x :: xs =>
       case (Ast.getAnnotation x, joinAnnotations xs) of
          (SOME p1, SOME p2) => SOME (Pos.union p1 p2)
        | (SOME p, NONE) => SOME p
        | (NONE, SOME p) => SOME p
        | _ => NONE


  fun makeVec tau xs =
    Ast.setAnnotation (joinAnnotations xs) (O.MK_VEC (tau, List.length xs) $$ List.map (fn x => [] \ x) xs)
end

structure Pattern =
struct
  infix $$ $ \

  fun labelAnonTuplePattern pats =
    let
      val lbls = List.tabulate (List.length pats, O.indexToLabel)
    in
      ListPair.zip (lbls, pats)
    end

  (* this code is kind of crappy, feel free to improve it *)
  fun unstitchPattern (pat : 'a O.dev_pattern) : unit O.dev_pattern * 'a list =
    case pat of
       O.PAT_VAR a => (O.PAT_VAR (), [a])
     | O.PAT_TUPLE lpats =>
       let
         val (lbls, pats) = ListPair.unzip (List.map (fn (lbl, pat) => (lbl, unstitchPattern pat)) lpats)
         val (pats, names) = ListPair.unzip pats
       in
         (O.PAT_TUPLE (ListPair.zip (lbls, pats)), List.concat names)
       end

  fun makeLambda pats tac =
    let
      val (pats', namess) = ListPair.unzip (List.map unstitchPattern pats)
      val names = List.concat namess
    in
      O.DEV_FUN_INTRO pats' $$ [names \ tac]
    end

  fun makeApplyHyp pat z tacs tac =
    let
      val (pat, names) = unstitchPattern pat
      val vec = Multi.makeVec O.TAC tacs
    in
      O.DEV_APPLY_HYP pat $$ [[] \ z, [] \ vec, names \ tac]
    end

  fun makeUseHyp z tacs =
    let
      val vec = Multi.makeVec O.TAC tacs
    in
      O.DEV_USE_HYP $$ [[] \ z, [] \ vec]
    end

  fun makeApplyLemma pat (opid, args) tacs tac =
    let
      val cust = O.CUST (opid, NONE) $$ args
      val any = O.MK_ANY NONE $$ [[] \ cust]
      val (pat, names) = unstitchPattern pat
      val vec = Multi.makeVec O.TAC tacs
      val args = [[] \ any, [] \ vec, names \ tac]
    in
      O.DEV_APPLY_LEMMA pat $$ args
    end

  fun makeUseLemma (opid, args) tacs =
    let
      val cust = O.CUST (opid, NONE) $$ args
      val any = O.MK_ANY NONE $$ [[] \ cust]
      val vec = Multi.makeVec O.TAC tacs
    in
      O.DEV_USE_LEMMA $$ [[] \ any, [] \ vec]
    end
end

%%
%header (functor RedPrlLrValsFun (structure Token : TOKEN))

%term
   EOF

 | VARNAME of string
 | OPNAME of string
 | UNDER
 | NUMERAL of IntInf.int
 | HOLENAME of string

 | COLON
 (* delimiters *)
 | LANGLE | RANGLE
 | LANGLE_PIPE | RANGLE_PIPE
 | LPAREN | RPAREN
 | RBRACKET | LBRACKET
 | LSQUARE | RSQUARE
 (* (mostly) single-character variables *)
 | BACK_TICK
 | COMMA
 | AMPERSAND
 | DOT
 | EQUALS
 | HASH
 | PERCENT
 | PIPE | DOUBLE_PIPE
 | SEMI
 (* arrows *)
 | SQUIGGLE_RIGHT_ARROW | SQUIGGLE_LEFT_ARROW
 | RIGHT_ARROW | LEFT_ARROW
 | DOUBLE_RIGHT_ARROW | LONG_RIGHT_ARROW
 | TRIANGLE_RIGHT
 | PLUS | DOUBLE_PLUS

 (* sorts *)
 | DIM | EXP | TAC | JDG | LVL | KND


 (* keywords and variables in expressions *)
 | AX
 | FCOM
 | BOOL | TT | FF | IF
 | NAT | ZERO | SUCC | NAT_REC
 | INT | POS | NEGSUCC | INT_REC
 | VOID
 | S1 | BASE | LOOP | S1_REC
 | LAMBDA | DOLLAR_SIGN
 | RECORD | ASTERISK | TUPLE | BANG
 | PATH | LINE | ABS | AT_SIGN
 | PUSHOUT | LEFT | RIGHT | GLUE | PUSHOUT_REC
 | COEQUALIZER | CECOD | CEDOM | COEQUALIZER_REC
 | SELF | REC
 | MEM
 | BOX | CAP
 | ECOM
 | V | VIN | VPROJ
 | UNIVERSE
 | HCOM | COE | COM

 | LMAX

 (* keywords in tactics *)
 | CASE | OF
 | LET | CLAIM | USE | WITH | WITHOUT
 | THEN | ELSE
 | REFINE
 | MTAC_PROGRESS | MTAC_REPEAT | MTAC_AUTO | MTAC_HOLE
 | TAC_ID | TAC_FAIL | TAC_AUTO_STEP | TAC_SYMMETRY | TAC_ELIM | TAC_REWRITE | TAC_REDUCE | TAC_UNFOLD
 | RULE_EXACT
 | TAC_INVERSION
 | TAC_ASSUMPTION
 | MATCH
 | QUERY | CONCL
 | PRINT

 (* keywords in judgments *)
 | TRUE | TYPE | AT (* `WITH` is reused *)

 | DISCRETE | KAN | PRE

 (* metalanguage *)
 | EXTRACT | QUIT
 | DEFINE | TACTIC | THEOREM | DATA
 | BY | IN | VAL | DO | CARET | END | FN

%right LEFT_ARROW RIGHT_ARROW DOUBLE_PIPE SEMI
%right ASTERISK
%nonassoc COMMA AMPERSAND COLON
%nonassoc FCOM BOOL TT FF IF NAT ZERO SUCC NAT_REC INT POS NEGSUCC INT_REC VOID S1 BASE LOOP LAMBDA DOLLAR_SIGN PATH ABS AT_SIGN AX HCOM COE
%nonassoc HASH LANGLE LPAREN VARNAME OPNAME



%nonterm
   start of ML.cmd -> ML.cmd

 | ident of string
 | boundVar of string option
 | boundVars of string option list

 | sort of O.sort
 | sorts of O.sort list

 | bindingSig of O.sort list
 | valence of Ar.valence

   (* parameters *)
 | numAsDimension of ast
 | dimension of ast
 | dimensions of ast list
 | dir of ast * ast
 | backDir of ast * ast
 | equation of ast * ast
 | tube of ast
 | tubes of ast list
 | boundary of ast
 | boundaries of ast list
 | tubeVec of ast
 | boundaryVec of ast

 | metavar of string
 | patvar of string * O.sort
 | patvarBindings of string list
 | customOpTerm of MlId.t * ast abs list
 | inductiveTerm of ast


 | typedBinder of string option list * ast Multi.typing
 | typedBinders of (string option list * ast Multi.typing) list
 | dimBinder of (string option list * ast Multi.typing)
 | arrowQuantifierData of ast
 | timesQuantifierData of (string option list * ast Multi.typing) list
 | field of string * ast
 | fields of (string * ast) list

   (* abt abstractions *)
 | binder of string list
 | binding of ast abs
 | bindings of ast abs list

   (* a type-theoretic term *)
 | nullaryOperator of operator
 | multinaryOperator of operator
 | rawTermAndTac of ast (* shared with tactics *)
 | rawTerm of ast
 | level of ast
 | levels of ast list

   (* a type-theoretic term, annotated with source position *)
 | term of ast
 | terms of ast list

 | kind of K.kind
 | withKind of ast

 | rawJudgment of ast
 | judgment of ast

   (* spec language *)
 | specTube of ast
 | specTubes of ast list
 | specBoundary of ast
 | specBoundaries of ast list
 | specTubeVec of ast
 | specBoundaryVec of ast
 | specArrowQuantifierData of ast
 | specType of ast
 | specTypedBinder of string option list * ast Multi.typing
 | specBinding of ast abs
 | specBindings of ast abs list
 | rawSpecTerm of ast
 | specTerm of ast
 | dataConstructor of ast
 | dataConstructors of string list * ast list
 | dataDecl of ast

 | termAnySort of ast
 | termsAnySort of ast list
 | elimTarget of ast
 | elimTargetAnySort of ast

 | atomicRawTac of ast
 | atomicTac of ast
 | atomicRawMultitac of ast
 | atomicMultitac of ast
 | rawMultitac of ast
 | multitac of ast
 | hypBinding of string * O.sort
 | hypBindings of (string * O.sort) list
 | rawTactic of ast
 | tactic of ast
 | tactics of ast list

 | recordFieldTactics of (string * ast) list

 | devAppSpine of ast list
 | bracketedDevAppSpine of ast list
 | devDecompPattern of string O.dev_pattern
 | devDecompPatterns of string O.dev_pattern list
 | labeledDecompPattern of string * string O.dev_pattern
 | anonTupleDecompPattern of string O.dev_pattern list
 | labeledTupleDecompPattern of (string * string O.dev_pattern) list
 | tupleDecompPattern of (string * string O.dev_pattern) list
 | devMatchClause of string list * (ast * ast)
 | devMatchClauses of (string list * (ast * ast)) list
 | selector of ast
 | selectors of ast list
 | accessor of ast
 | accessors of ast list
 | opnames of MlId.t list

 | declArgument of metavariable * Ar.valence
 | declArguments of Signature.Src.arguments
 | declArgumentsParens of Signature.Src.arguments

 | rxAtom of string
 | rxAtoms of string list
 | rxEqn of Rx.node Rx.eqn
 | rexpr of Rx.node
 | rexprs of Rx.node list

 | mlVty of MlType.vty
 | mlCty of MlType.cty
 | mlValue of ML.value
 | mlCmd of ML.cmd
 | mlAtomicCmd of ML.cmd
 | mlDecl of ML.cmd -> ML.cmd

%verbose
%pos (string -> Coord.t)
%start start
%eop EOF DOT
%noshift EOF
%name RedPrl
%arg (fileName) : string
%%

start : mlDecl (mlDecl)

ident
  : OPNAME (OPNAME)
  | VARNAME (VARNAME)

boundVar
  : VARNAME (SOME VARNAME)
  | UNDER (NONE)

boundVars
  : boundVar ([boundVar])
  | boundVar boundVars (boundVar :: boundVars)

sort
  : EXP (O.EXP)
  | TAC (O.TAC)
  | JDG (O.JDG)
  | LVL (O.LVL)
  | KND (O.KND)
  | DIM (O.DIM)

sorts
  : sort ([sort])
  | sort COMMA sorts (sort :: sorts)
  | ([])

bindingSig
  : LSQUARE sorts RSQUARE DOT (sorts)
  | ([])

valence
  : bindingSig sort ((bindingSig, sort))

numAsDimension
  : NUMERAL (makeDim (Pos.pos (NUMERAL1left fileName) (NUMERAL1right fileName)) NUMERAL)

dimension
  : VARNAME (annotate (Pos.pos (VARNAMEleft fileName) (VARNAMEright fileName)) (`` VARNAME))
  | metavar  (annotate (Pos.pos (metavarleft fileName) (metavarright fileName)) (Ast.$$# (metavar, [])))
  | numAsDimension (annotate (Pos.pos (numAsDimensionleft fileName) (numAsDimensionright fileName)) numAsDimension)

dimensions
  : dimension dimensions (dimension :: dimensions)
  | dimension ([dimension])

dir
  : dimension SQUIGGLE_RIGHT_ARROW dimension ((dimension1, dimension2))

backDir
  : dimension SQUIGGLE_LEFT_ARROW dimension ((dimension1, dimension2))

equation
  : dimension EQUALS dimension (dimension1, dimension2)

tube
  : LSQUARE equation binding RSQUARE (Ast.$$ (O.MK_TUBE O.EXP, [\ ([], #1 equation), \ ([], #2 equation), binding]))

boundary
  : LSQUARE equation term RSQUARE (Ast.$$ (O.MK_BDRY O.EXP, [\ ([], #1 equation), \ ([], #2 equation), \ ([], term)]))

tubes
  : tube tubes (tube :: tubes)
  | ([])

boundaries
  : boundary boundaries (boundary :: boundaries)
  | ([])

tubeVec
  : tubes (Multi.makeVec (O.TUBE O.EXP) tubes)

boundaryVec
  : boundaries (Multi.makeVec (O.BDRY O.EXP) boundaries)

metavar
  : HASH ident (ident)

typedBinder
  : LSQUARE boundVars COLON term RSQUARE (boundVars, Multi.TERM term)

typedBinders
  : typedBinder ([typedBinder])
  | typedBinder typedBinders (typedBinder :: typedBinders)

dimBinder
  : LSQUARE boundVars COLON DIM RSQUARE (boundVars, Multi.DIM)

arrowQuantifierData
  : typedBinder arrowQuantifierData (Multi.makeFunOrLines typedBinder arrowQuantifierData)
  | dimBinder arrowQuantifierData (Multi.makeFunOrLines dimBinder arrowQuantifierData)
  | term arrowQuantifierData (Multi.makeFunOrLine (NONE, Multi.TERM term) arrowQuantifierData)
  | DIM arrowQuantifierData (Multi.makeFunOrLine (NONE, Multi.DIM) arrowQuantifierData)
  | term (term)

timesQuantifierData
  : typedBinder timesQuantifierData (typedBinder :: timesQuantifierData)
  | term timesQuantifierData (([NONE], Multi.TERM term) :: timesQuantifierData)
  | term ([([NONE], Multi.TERM term)])

field
  : LSQUARE ident term RSQUARE (ident, term)

fields
  : field fields (field :: fields)
  | field ([field])

binder
  : LSQUARE boundVars RSQUARE (Multi.addUnderscores boundVars)

binding
  : binder term (\ (binder, term))
  | term (\ ([], term))

bindings
  : binding bindings (binding :: bindings)
  | binding ([binding])


(* built-in nullary operators that take no parameters *)
nullaryOperator
  (* axiom *)
  : AX (O.AX)
  (* bools *)
  | BOOL (O.BOOL)
  | TT (O.TT)
  | FF (O.FF)
  (* natural numbers *)
  | NAT (O.NAT)
  | ZERO (O.ZERO)
  (* integers *)
  | INT (O.INT)
  (* void *)
  | VOID (O.VOID)
  (* circle *)
  | S1 (O.S1)
  | BASE (O.BASE)

  | kind (O.KCONST kind)


(* built-in operators that do not have special form *)
multinaryOperator
  (* bools *)
  : IF (O.IF)
  (* natural numbers *)
  | SUCC (O.SUCC)
  | NAT_REC (O.NAT_REC)
  (* integers *)
  | POS (O.POS)
  | NEGSUCC (O.NEGSUCC)
  | INT_REC (O.INT_REC)
  (* S1 *)
  | S1_REC (O.S1_REC)
  (* paths *)
  | PATH (O.PATH)
  (* lines *)
  | LINE (O.LINE)
  (* pushouts *)
  | PUSHOUT (O.PUSHOUT)
  | LEFT (O.LEFT)
  | RIGHT (O.RIGHT)
  | GLUE (O.GLUE)
  | PUSHOUT_REC (O.PUSHOUT_REC)
  (* coequalizers *)
  | COEQUALIZER (O.COEQUALIZER)
  | CECOD (O.CECOD)
  | CEDOM (O.CEDOM)
  | COEQUALIZER_REC (O.COEQUALIZER_REC)
  (* equality *)
  | EQUALS (O.EQUALITY)
  (* V *)
  | V (O.V)
  | VIN (O.VIN)
  | VPROJ (O.VPROJ)


customOpTerm
  : OPNAME (MlId.const OPNAME, [])
  | LPAREN OPNAME bindings RPAREN (MlId.const OPNAME, bindings)

inductiveTerm
  : LPAREN DOT OPNAME TYPE RPAREN (Ast.$$ (O.IND_TYPE (MlId.const OPNAME, NONE), []))
  | LPAREN DOT OPNAME TYPE bindings RPAREN (Ast.$$ (O.IND_TYPE (MlId.const OPNAME, NONE), bindings))
  | LPAREN DOT OPNAME ident RPAREN (Ast.$$ (O.IND_INTRO (MlId.const OPNAME1, ident, NONE), []))
  | LPAREN DOT OPNAME ident bindings RPAREN (Ast.$$ (O.IND_INTRO (MlId.const OPNAME1, ident, NONE), bindings))
  | LPAREN DOT OPNAME REC bindings RPAREN (Ast.$$ (O.IND_REC (MlId.const OPNAME, NONE), bindings))

patvar
  : PERCENT LSQUARE VARNAME COLON sort RSQUARE ((VARNAME, sort))
  | PERCENT VARNAME ((VARNAME, O.EXP))

patvarBindings
  : VARNAME patvarBindings (VARNAME :: patvarBindings)
  | VARNAME ([VARNAME])

rawTermAndTac
  : VARNAME (`` VARNAME)

  (* meta variable *)
  | metavar (Ast.$$# (metavar, []))
  | LPAREN metavar terms RPAREN (Ast.$$# (metavar, terms))

  (* pattern variables *)
  | patvar (Ast.$$ (O.PAT_META (#2 patvar), [\ ([], ``(#1 patvar)), \ ([], Multi.makeVec O.ANY [])]))
  | LPAREN patvar termsAnySort RPAREN (Ast.$$ (O.PAT_META (#2 patvar), [\ ([], ``(#1 patvar)), \ ([], Multi.makeVec O.ANY termsAnySort)]))

  (* custom operators *)
  | customOpTerm (makeCustom customOpTerm)

  (* inductive types *)
  | inductiveTerm (inductiveTerm)

  (* built-in operators that can be handled uniformly *)
  | nullaryOperator (Ast.$$ (nullaryOperator, []))
  | LPAREN multinaryOperator bindings RPAREN (Ast.$$ (multinaryOperator, bindings))

  | LPAREN UNIVERSE level RPAREN (Ast.$$ (O.UNIVERSE, [Ast.\ ([], level), Ast.\ ([], Ast.$$ (O.KCONST RedPrlKind.top, []))]))
  | LPAREN UNIVERSE level term RPAREN (Ast.$$ (O.UNIVERSE, [Ast.\ ([], level), Ast.\ ([], term)]))

  | LPAREN LOOP dimension RPAREN (Ast.$$ (O.LOOP, [Ast.\ ([], dimension)]))

  (* Kan operators *)
  | LPAREN COE dir binding term RPAREN
    (Ast.$$ (O.COE, [\([], #1 dir), \([], #2 dir), binding, \([], term)]))
  | LPAREN FCOM dir term tubeVec RPAREN
    (Ast.$$ (O.FCOM, [\([], #1 dir), \([], #2 dir), \([], term), \([], tubeVec)]))
  | LPAREN HCOM dir binding term tubeVec RPAREN
    (Ast.$$ (O.HCOM, [\([], #1 dir), \([], #2 dir), binding, \([], term), \([], tubeVec)]))
  | LPAREN COM dir binding term tubeVec RPAREN
    (Ast.$$ (O.COM, [\([], #1 dir), \([], #2 dir), binding, \([], term), \([], tubeVec)]))
  | LPAREN BOX dir term boundaryVec RPAREN
    (Ast.$$ (O.BOX, [\([], #1 dir), \([], #2 dir), \([], term), \([], boundaryVec)]))
  | LPAREN CAP backDir term tubeVec RPAREN
    (Ast.$$ (O.CAP, [\([], #1 backDir), \([], #2 backDir), \([], term), \([], tubeVec)]))
  | LPAREN ECOM dir term tubeVec RPAREN
    (Ast.$$ (O.ECOM, [\([], #1 dir), \([], #2 dir), \([], term), \([], tubeVec)]))

  (* numbers *)
  | NUMERAL (makeDim (Pos.pos (NUMERAL1left fileName) (NUMERAL1right fileName)) NUMERAL)
  | LPAREN DIM NUMERAL RPAREN (makeDim (Pos.pos (NUMERAL1left fileName) (NUMERAL1right fileName)) NUMERAL)
  | LPAREN NAT NUMERAL RPAREN (Multi.makeNat (Pos.pos (NUMERAL1left fileName) (NUMERAL1right fileName)) NUMERAL)
  | LPAREN INT NUMERAL RPAREN (Multi.makeInt (Pos.pos (NUMERAL1left fileName) (NUMERAL1right fileName)) NUMERAL)

  (* function types *)
  | LPAREN RIGHT_ARROW arrowQuantifierData RPAREN (arrowQuantifierData)
  | LPAREN LAMBDA LSQUARE boundVars RSQUARE term RPAREN (Multi.makeLam boundVars term)
  | LPAREN DOLLAR_SIGN term terms RPAREN (Multi.makeApp term terms)

  (* pair types *)
  | LPAREN ASTERISK timesQuantifierData RPAREN (Multi.makeProd (Pos.pos (LPAREN1left fileName) (RPAREN1right fileName)) timesQuantifierData)

  (* dependent record types *)
  | RECORD (Multi.makeRecord (Pos.pos (RECORD1left fileName) (RECORD1right fileName)) [])
  | LPAREN RECORD typedBinders RPAREN (Multi.makeRecord (Pos.pos (LPAREN1left fileName) (RPAREN1right fileName)) typedBinders)
  | TUPLE (Multi.makeTuple (Pos.pos (TUPLE1left fileName) (TUPLE1right fileName)) [])
  | LPAREN TUPLE fields RPAREN (Multi.makeTuple (Pos.pos (LPAREN1left fileName) (RPAREN1right fileName)) fields)
  | LPAREN TUPLE terms RPAREN (Multi.makeAnonymousTuple terms)
  | LPAREN BANG ident term RPAREN (Ast.$$ (O.PROJ ident, [\ ([], term)]))

  (* paths *)
  | LPAREN ABS LSQUARE boundVars RSQUARE term RPAREN (Multi.makeAbs boundVars term)
  | LPAREN AT_SIGN term dimensions RPAREN (Multi.makeDimApp term dimensions)

  (* Abbreviation for membership *)
  | LPAREN MEM term term RPAREN (Ast.$$ (O.EQUALITY, [Ast.\ ([], term1), Ast.\ ([], term2), Ast.\ ([], term2)]))

  (* levels *)
  | LPAREN PLUS level NUMERAL RPAREN (Ast.$$ (O.LPLUS NUMERAL, [Ast.\ ([], level)]))
  | LPAREN DOUBLE_PLUS level RPAREN (Ast.$$ (O.LPLUS 1, [Ast.\ ([], level)]))
  | LPAREN LMAX levels RPAREN (Ast.$$ (O.LMAX, [\ ([], Multi.makeVec O.LVL levels)]))


level
  : NUMERAL (Ast.$$ (O.LCONST NUMERAL, []))
  | LPAREN PLUS level NUMERAL RPAREN (Ast.$$ (O.LPLUS NUMERAL, [Ast.\ ([], level)]))
  | LPAREN DOUBLE_PLUS level RPAREN (Ast.$$ (O.LPLUS 1, [Ast.\ ([], level)]))
  | LPAREN LMAX levels RPAREN (Ast.$$ (O.LMAX, [\ ([], Multi.makeVec O.LVL levels)]))
  | metavar (Ast.$$# (metavar, []))
  | PERCENT VARNAME (Ast.$$ (O.PAT_META O.LVL, [\ ([], ``VARNAME), \ ([], Multi.makeVec O.ANY [])]))

levels
  : level ([level])
  | levels level (level :: levels)

rawTerm
  : rawTermAndTac (rawTermAndTac)
  | HASH TAC LBRACKET tactic RBRACKET (tactic)
  | HASH JDG LBRACKET judgment RBRACKET (judgment)
  | HASH LVL LBRACKET level RBRACKET (level)

term : rawTerm (annotate (Pos.pos (rawTerm1left fileName) (rawTerm1right fileName)) rawTerm)

terms
  : term ([term])
  | term terms (term :: terms)

kind
  : DISCRETE (K.DISCRETE)
  | KAN (K.KAN)
  | HCOM (K.HCOM)
  | COE (K.COE)
  | PRE (K.PRE)

withKind
  : WITH term (term)
  | (Ast.$$ (O.KCONST K.top, []))

rawJudgment
  : term EQUALS term IN term (Ast.$$ (O.JDG_TRUE, [\\ (Ast.$$ (O.EQUALITY, [\\ term3, \\ term1, \\ term2]))]))
  | term IN term (Ast.$$ (O.JDG_TRUE, [\\ (Ast.$$ (O.EQUALITY, [\\ term2, \\ term1, \\ term1]))]))
  | term TRUE (Ast.$$ (O.JDG_TRUE, [\\ term]))
  | term (Ast.$$ (O.JDG_TRUE, [\\ term]))
  | term EQUALS term TYPE withKind (Ast.$$ (O.JDG_EQ_TYPE, [\\ withKind, \\ term1, \\ term2]))
  | term TYPE withKind (Ast.$$ (O.JDG_EQ_TYPE, [\\ withKind, \\ term, \\ term]))

judgment : rawJudgment (annotate (Pos.pos (rawJudgment1left fileName) (rawJudgment1right fileName)) rawJudgment)

specTube
  : LSQUARE equation specBinding RSQUARE (Ast.$$ (O.MK_BDRY O.IND_SPEC, [\\ (#1 equation), \\ (#2 equation), specBinding]))

specTubes
  : specTube specTubes (specTube :: specTubes)

specBoundary
  : LSQUARE equation specTerm RSQUARE (Ast.$$ (O.MK_BDRY O.IND_SPEC, [\\ (#1 equation), \\ (#2 equation), \\ specTerm]))

specBoundaries
  : specBoundary specBoundaries (specBoundary :: specBoundaries)
  | specBoundary ([specBoundary])

specTubeVec
  : specTubes (Multi.makeVec (O.BDRY O.IND_SPEC) specTubes)

specBoundaryVec
  : specBoundaries (Multi.makeVec (O.BDRY O.IND_SPEC) specBoundaries)

specArrowQuantifierData
  : typedBinder specArrowQuantifierData (Multi.makeSpecFunOrLines typedBinder specArrowQuantifierData)
  | term specArrowQuantifierData (Multi.makeSpecFunOrLine (NONE, Multi.TERM term) specArrowQuantifierData)
  | specType (specType)

specType
  : SELF (Ast.$$ (O.IND_SPECTYPE_SELF, []))
  | LPAREN SELF RIGHT_ARROW specArrowQuantifierData RPAREN (specArrowQuantifierData)

specTypedBinder
  : LSQUARE boundVars COLON specType RSQUARE (boundVars, Multi.IND_SPEC specType)

specBinding
  : binder specTerm (\ (binder, specTerm))
  | specTerm (\\ specTerm)

specBindings
  : specBinding specBindings (specBinding :: specBindings)
  | specBinding ([specBinding])

rawSpecTerm
  : rawTerm (rawTerm)

  (* intro *)
  | LPAREN SELF ident RPAREN (Ast.$$ (O.IND_SPEC_INTRO (ident, NONE), []))
  | LPAREN SELF ident specBindings RPAREN (Ast.$$ (O.IND_SPEC_INTRO (ident, NONE), specBindings))

  (* fcom *)
  | LPAREN SELF FCOM dir specTerm specTubeVec RPAREN
      (Ast.$$ (O.IND_SPEC_FCOM, [\\ (#1 dir), \\ (#2 dir), \\ specTerm, \\ specTubeVec]))

  (* lambda and applications *)
  | LPAREN SELF LAMBDA LSQUARE boundVars RSQUARE specTerm RPAREN (Multi.makeSpecLam boundVars specTerm)
  | LPAREN SELF DOLLAR_SIGN specTerm terms RPAREN (Multi.makeSpecApp specTerm terms)

specTerm : rawSpecTerm (annotate (Pos.pos (rawSpecTerm1left fileName) (rawSpecTerm1right fileName)) rawSpecTerm)

dataConstructor
  : typedBinder dataConstructor (Multi.makeConstrFunOrLines typedBinder dataConstructor)
  | dimBinder dataConstructor (Multi.makeConstrFunOrLines dimBinder dataConstructor)
  | specTypedBinder dataConstructor (Multi.makeConstrFunOrLines specTypedBinder dataConstructor)
  | term dataConstructor (Multi.makeConstrFunOrLine (NONE, Multi.TERM term) dataConstructor)
  | DIM dataConstructor (Multi.makeConstrFunOrLine (NONE, Multi.DIM) dataConstructor)
  | specType dataConstructor (Multi.makeConstrFunOrLine (NONE, Multi.IND_SPEC specType) dataConstructor)
  | specBoundaryVec (Ast.$$ (O.IND_CONSTR_KAN, [\\ specBoundaryVec]))
  | (Ast.$$ (O.IND_CONSTR_DISCRETE, [\\ (Multi.makeVec (O.BDRY O.IND_SPEC) [])]))

dataConstructors
  : ident dataConstructor COMMA dataConstructors (ident :: #1 dataConstructors, dataConstructor :: #2 dataConstructors)
  | ident dataConstructor ([ident], [dataConstructor])
  | ([],[])

dataDecl
  : typedBinder dataDecl (Multi.makeIndFamFunOrLines typedBinder dataDecl)
  | dimBinder dataDecl (Multi.makeIndFamFunOrLines dimBinder dataDecl)
  | COLON LPAREN UNIVERSE level KAN RPAREN LBRACKET dataConstructors RBRACKET
      (Ast.$$ (O.IND_FAM_BASE (#1 dataConstructors), \\ level :: List.map \\ (#2 dataConstructors)))

recordFieldTactics
   : VARNAME EQUALS tactic COMMA recordFieldTactics ((VARNAME, tactic) :: recordFieldTactics)
   | VARNAME EQUALS tactic ([(VARNAME, tactic)])
   | ([])

devAppSpine
  : tactic COMMA devAppSpine (tactic :: devAppSpine)
  | tactic ([tactic])
  | ([])

bracketedDevAppSpine
  : LSQUARE devAppSpine RSQUARE (devAppSpine)
  | ([])

devDecompPattern
  : VARNAME (O.PAT_VAR VARNAME)
  | UNDER (O.PAT_VAR "_")
  | LBRACKET tupleDecompPattern RBRACKET (O.PAT_TUPLE tupleDecompPattern)

devDecompPatterns
  : devDecompPattern devDecompPatterns (devDecompPattern :: devDecompPatterns)
  | devDecompPattern ([devDecompPattern])

labeledDecompPattern
  : VARNAME EQUALS devDecompPattern (VARNAME, devDecompPattern)

labeledTupleDecompPattern
   : labeledDecompPattern COMMA labeledTupleDecompPattern (labeledDecompPattern :: labeledTupleDecompPattern)
   | labeledDecompPattern ([labeledDecompPattern])
   | ([])

anonTupleDecompPattern
   : devDecompPattern COMMA anonTupleDecompPattern (devDecompPattern :: anonTupleDecompPattern)
   | devDecompPattern ([devDecompPattern])

tupleDecompPattern
  : labeledTupleDecompPattern (labeledTupleDecompPattern)
  | anonTupleDecompPattern (Pattern.labelAnonTuplePattern anonTupleDecompPattern)

devMatchClause
  : LSQUARE patvarBindings PIPE termAnySort DOUBLE_RIGHT_ARROW tactic RSQUARE (patvarBindings, (termAnySort, tactic))
  | LSQUARE termAnySort DOUBLE_RIGHT_ARROW tactic RSQUARE ([], (termAnySort, tactic))

devMatchClauses
  : devMatchClause devMatchClauses (devMatchClause :: devMatchClauses)
  | ([])

selector
  : CONCL (Ast.$$ (O.SEL_CONCL, []))
  | elimTargetAnySort (Ast.$$ (O.SEL_HYP, [Ast.\ ([], elimTargetAnySort)]))

accessor
  : TYPE (Ast.$$ (O.ACC_TYPE, []))
  | LEFT (Ast.$$ (O.ACC_LEFT, []))
  | RIGHT (Ast.$$ (O.ACC_RIGHT, []))

accessors
  : accessor accessors (accessor :: accessors)
  | accessor ([accessor])

selectors
  : selector selectors (selector :: selectors)
  | selector ([selector])

opnames
  : OPNAME opnames (MlId.const OPNAME :: opnames)
  | OPNAME ([MlId.const OPNAME])

termAnySort
  : term (Ast.setAnnotation (Ast.getAnnotation term) (Ast.$$ (O.MK_ANY NONE, [Ast.\ ([], term)])))

termsAnySort
  : termAnySort ([termAnySort])
  | termAnySort termsAnySort (termAnySort :: termsAnySort)

elimTarget
  : VARNAME (annotate (Pos.pos (VARNAMEleft fileName) (VARNAMEright fileName)) (``VARNAME))
  | metavar (annotate (Pos.pos (metavarleft fileName) (metavarright fileName)) (Ast.$$# (metavar, [])))

elimTargetAnySort
  : elimTarget (Ast.setAnnotation (Ast.getAnnotation elimTarget) (Ast.$$ (O.MK_ANY NONE, [Ast.\ ([], elimTarget)])))


atomicRawTac
  : REFINE VARNAME (Ast.$$ (O.RULE_PRIM VARNAME, []))
  | TAC_ID (Ast.$$ (O.TAC_ID, []))
  | TAC_FAIL (Ast.$$ (O.TAC_FAIL, []))
  | TAC_AUTO_STEP (Ast.$$ (O.TAC_AUTO_STEP, []))
  | TAC_SYMMETRY (Ast.$$ (O.TAC_SYMMETRY, []))
  | TAC_ELIM elimTargetAnySort (Ast.$$ (O.TAC_ELIM, [Ast.\ ([], elimTargetAnySort)]))
  | TAC_REWRITE term (Ast.$$ (O.TAC_REWRITE, [\\ (Ast.$$ (O.SEL_CONCL, [])), \\ (Multi.makeVec O.ACC [(Ast.$$ (O.ACC_WHOLE, []))]), \\ term]))
  | TAC_REWRITE term AT accessors (Ast.$$ (O.TAC_REWRITE, [\\ (Ast.$$ (O.SEL_CONCL, [])), \\ (Multi.makeVec O.ACC accessors), \\ term]))
  | TAC_REWRITE term IN selector (Ast.$$ (O.TAC_REWRITE, [\\ selector, \\ (Multi.makeVec O.ACC [(Ast.$$ (O.ACC_WHOLE, []))]), \\ term]))
  | TAC_REWRITE term AT accessors IN selector (Ast.$$ (O.TAC_REWRITE, [\\ selector, \\ (Multi.makeVec O.ACC accessors), \\ term]))
  | TAC_REWRITE term IN selector AT accessors (Ast.$$ (O.TAC_REWRITE, [\\ selector, \\ (Multi.makeVec O.ACC accessors), \\ term]))
  | TAC_REDUCE (Ast.$$ (O.TAC_REDUCE_ALL, []))
  | TAC_REDUCE IN selectors (Ast.$$ (O.TAC_REDUCE, [Ast.\ ([], Multi.makeVec O.SEL selectors)]))
  | TAC_REDUCE AT accessors (Ast.$$ (O.TAC_REDUCE_PART, [\\ (Ast.$$ (O.SEL_CONCL, [])), \\ (Multi.makeVec O.ACC accessors)]))
  | TAC_REDUCE IN selector AT accessors (Ast.$$ (O.TAC_REDUCE_PART, [\\ selector, \\ (Multi.makeVec O.ACC accessors)]))
  | TAC_REDUCE AT accessors IN selector (Ast.$$ (O.TAC_REDUCE_PART, [\\ selector, \\ (Multi.makeVec O.ACC accessors)]))
  | TAC_UNFOLD opnames (Ast.$$ (O.TAC_UNFOLD_ALL opnames, []))
  | TAC_UNFOLD opnames IN selectors (Ast.$$ (O.TAC_UNFOLD opnames, [Ast.\ ([], Multi.makeVec O.SEL selectors)]))
  | TAC_UNFOLD opnames AT accessors (Ast.$$ (O.TAC_UNFOLD_PART opnames, [\\ (Ast.$$ (O.SEL_CONCL, [])), Ast.\ ([], Multi.makeVec O.ACC accessors)]))
  | TAC_UNFOLD opnames IN selector AT accessors (Ast.$$ (O.TAC_UNFOLD_PART opnames, [\\ selector, Ast.\ ([], Multi.makeVec O.ACC accessors)]))
  | TAC_UNFOLD opnames AT accessors IN selector (Ast.$$ (O.TAC_UNFOLD_PART opnames, [\\ selector, Ast.\ ([], Multi.makeVec O.ACC accessors)]))

  | BACK_TICK termAnySort (Tac.exactAuto termAnySort)
  | RULE_EXACT termAnySort (Tac.exact termAnySort)

  | TAC_INVERSION (Tac.inversion)
  | TAC_ASSUMPTION (Tac.assumption)

  | atomicTac DOUBLE_PIPE tactic %prec DOUBLE_PIPE (Tac.orElse (atomicTac, tactic))

  | LAMBDA devDecompPatterns DOUBLE_RIGHT_ARROW tactic (Pattern.makeLambda devDecompPatterns tactic)
  | ABS boundVars DOUBLE_RIGHT_ARROW tactic (Ast.$$ (O.DEV_PATH_INTRO (List.length boundVars), [\ (Multi.addUnderscores boundVars, tactic)]))
  | LBRACKET recordFieldTactics RBRACKET (Multi.recordIntro (Pos.pos (LBRACKET1left fileName) (RBRACKET1right fileName)) recordFieldTactics)
  | LBRACKET tactics RBRACKET (Multi.sigmaIntro tactics)

  | WITHOUT termsAnySort (Ast.$$ (O.TAC_PUSH, [\ ([], Multi.makeVec O.ANY termsAnySort)]))
  | WITH hypBindings DOUBLE_RIGHT_ARROW tactic (Ast.$$ (O.TAC_POP (List.map #2 hypBindings), [\ (List.map #1 hypBindings, tactic)]))

  | IF elimTarget THEN tactic ELSE tactic
      (Ast.$$ (O.DEV_BOOL_ELIM, [\ ([], elimTarget), \ ([], tactic1), \ ([], tactic2)]))

  | CLAIM VARNAME COLON judgment BY LBRACKET tactic RBRACKET SEMI tactic
      (Ast.$$ (O.DEV_CLAIM NONE, [\ ([], judgment), \ ([], tactic1), \([VARNAME], tactic2)]))

  | LET devDecompPattern EQUALS elimTargetAnySort bracketedDevAppSpine SEMI tactic
      (Pattern.makeApplyHyp devDecompPattern elimTargetAnySort bracketedDevAppSpine tactic)

  | LET devDecompPattern EQUALS customOpTerm bracketedDevAppSpine SEMI tactic (Pattern.makeApplyLemma devDecompPattern customOpTerm bracketedDevAppSpine tactic)

  | USE elimTargetAnySort bracketedDevAppSpine (Pattern.makeUseHyp elimTargetAnySort bracketedDevAppSpine)
  | USE customOpTerm bracketedDevAppSpine (Pattern.makeUseLemma customOpTerm bracketedDevAppSpine)

  | CASE elimTarget OF BASE DOUBLE_RIGHT_ARROW tactic PIPE LOOP VARNAME DOUBLE_RIGHT_ARROW tactic
      (Ast.$$ (O.DEV_S1_ELIM, [\ ([], elimTarget), \ ([], tactic1), \([VARNAME], tactic2)]))

  | MATCH termAnySort LBRACKET devMatchClauses RBRACKET (Tac.makeMatch termAnySort devMatchClauses)
  | QUERY VARNAME LEFT_ARROW selector SEMI tactic (Ast.$$ (O.DEV_QUERY, [\ ([], selector), \ ([VARNAME], tactic)]))
  | PRINT termAnySort (Ast.$$ (O.DEV_PRINT, [\ ([], termAnySort)]))

  (* overlapping with term *)
  | rawTermAndTac (annotate (Pos.pos (rawTermAndTacleft fileName) (rawTermAndTacright fileName)) rawTermAndTac)

atomicTac : atomicRawTac (annotate (Pos.pos (atomicRawTac1left fileName) (atomicRawTac1right fileName)) atomicRawTac)

atomicRawMultitac
  : LSQUARE tactics RSQUARE (Ast.$$ (O.MTAC_EACH, [\([], Multi.makeVec O.TAC tactics)]))
  | HASH NUMERAL LBRACKET tactic RBRACKET (Ast.$$ (O.MTAC_FOCUS (IntInf.toInt NUMERAL), [\ ([], tactic)]))
  | MTAC_REPEAT LBRACKET multitac RBRACKET (Ast.$$ (O.MTAC_REPEAT, [\ ([], multitac)]))
  | MTAC_AUTO (Tac.autoMtac)
  | MTAC_PROGRESS LBRACKET multitac RBRACKET (Ast.$$ (O.MTAC_PROGRESS, [\ ([], multitac)]))
  | LPAREN multitac RPAREN (multitac)
  | atomicTac %prec SEMI (Ast.$$ (O.MTAC_ALL, [\ ([], atomicTac)]))
  | HOLENAME (Ast.$$ (O.MTAC_HOLE (SOME HOLENAME), []))

atomicMultitac
  : atomicRawMultitac (annotate (Pos.pos (atomicRawMultitac1left fileName) (atomicRawMultitac1right fileName)) atomicRawMultitac)

rawMultitac
  : multitac SEMI atomicMultitac %prec SEMI (Tac.makeSeq multitac atomicMultitac)
  | multitac SEMI (multitac)
  | atomicMultitac %prec SEMI (atomicMultitac)

multitac : rawMultitac (annotate (Pos.pos (rawMultitac1left fileName) (rawMultitac1right fileName)) rawMultitac)

hypBinding
  : boundVar COLON sort (Option.getOpt (boundVar, "_"), sort)
  | boundVar (Option.getOpt (boundVar, "_"), O.EXP)

hypBindings
  : hypBinding hypBindings %prec COMMA (hypBinding :: hypBindings)
  | ([])

rawTactic
  : multitac %prec SEMI (Tac.multitacToTac multitac)

tactic
  : rawTactic (annotate (Pos.pos (rawTactic1left fileName) (rawTactic1right fileName)) rawTactic)

tactics
  : tactic ([tactic])
  | tactic COMMA tactics (tactic :: tactics)
  | tactic COMMA ([tactic])

declArgument
  : metavar COLON valence ((metavar, valence))
  | metavar ((metavar, ([], O.EXP)))

declArguments
  : declArgument ([declArgument])
  | declArgument COMMA declArguments (declArgument :: declArguments)
  | ([])

declArgumentsParens
  : LPAREN declArguments RPAREN (declArguments)
  | ([])




rxAtom
  : ident 
    (ident)
  | RIGHT_ARROW
    ("->")
  | ASTERISK
    ("*")
  | SQUIGGLE_RIGHT_ARROW
    ("~>")
  | SQUIGGLE_LEFT_ARROW
    ("<~")

rxAtoms 
  : rxAtom
    ([rxAtom])
  | rxAtom rxAtoms
    (rxAtom :: rxAtoms)
  | ([])

rxEqn
  : rexpr EQUALS rexpr
    ({lhs = rexpr1, rhs = rexpr2})

rexpr
  : rxAtom
    (Rx.makeNode (rxAtomleft fileName, rxAtomright fileName, Rx.ATOM rxAtom))
  | LPAREN rexprs RPAREN
    (Rx.makeNode (LPARENleft fileName, RPARENright fileName, Rx.LIST rexprs))
  | LSQUARE rxAtoms RSQUARE
    (Rx.makeNode (LSQUAREleft fileName, RSQUAREright fileName, Rx.BIND_CELL rxAtoms))
  | LSQUARE rxAtom rexpr RSQUARE
    (Rx.makeNode (LSQUAREleft fileName, RSQUAREright fileName, Rx.LABEL_CELL (rxAtom, rexpr)))
  | LSQUARE rxAtoms COLON rexpr RSQUARE
    (Rx.makeNode (LSQUAREleft fileName, RSQUAREright fileName, Rx.TYPED_CELL (rxAtoms, rexpr)))
  | LSQUARE rxEqn LSQUARE rxAtom RSQUARE rexpr RSQUARE
    (Rx.makeNode (LSQUARE1left fileName, RSQUARE2right fileName, Rx.TUBE_CELL (rxEqn, rxAtom, rexpr)))
    

rexprs
  : rexpr
    ([rexpr])
  | rexpr rexprs
    (rexpr::rexprs)
  | ([])






mlVty
  : LPAREN RPAREN
    (MlType.ONE)
  | LBRACKET mlCty RBRACKET
    (MlType.DOWN mlCty)
  
mlCty 
  : CARET mlVty
    (MlType.UP mlVty)
  | mlVty RIGHT_ARROW mlCty
    (MlType.FUN (mlVty, mlCty))

mlValue
  : OPNAME
    (ML.VAR (MlId.const OPNAME))
  | LBRACKET mlCmd RBRACKET
    (ML.THUNK mlCmd)
  | LPAREN RPAREN
    (ML.NIL)

mlAtomicCmd
  : PRINT mlValue
    (ML.PRINT (SOME (Pos.pos (mlValueleft fileName) (mlValueright fileName)), mlValue))
  | QUIT
    (ML.ABORT)
  | EXTRACT mlValue
    (ML.EXTRACT mlValue)
  | CARET mlValue
    (ML.RET mlValue)
  | BANG mlValue
    (ML.FORCE mlValue)

mlCmd
  : LET mlDecl SEMI mlCmd
    (mlDecl mlCmd)
  | FN OPNAME COLON mlVty DOUBLE_RIGHT_ARROW mlCmd
    (ML.FN (MlId.const OPNAME, mlVty, mlCmd))
  | mlValue RANGLE mlCmd
    (ML.AP (mlCmd, mlValue))
  | mlAtomicCmd
    (mlAtomicCmd)

mlDecl
  : DEFINE OPNAME declArgumentsParens COLON sort EQUALS term
    (fn kont =>
       ML.BIND (ML.DEF {arguments = declArgumentsParens, definiens = (term, sort)}, MlId.const OPNAME, kont))

  | DEFINE OPNAME declArgumentsParens EQUALS term
    (fn kont =>
       ML.BIND (ML.DEF {arguments = declArgumentsParens, definiens = (term, O.EXP)}, MlId.const OPNAME, kont))

  | DATA OPNAME declArgumentsParens dataDecl BY LBRACKET multitac RBRACKET
    (fn kont =>
       ML.BIND (ML.DATA_DECL {name = OPNAME, arguments = declArgumentsParens, decl = dataDecl, script = multitac}, MlId.const OPNAME, kont))

  | TACTIC OPNAME declArgumentsParens EQUALS LBRACKET tactic RBRACKET
    (fn kont =>
       ML.BIND (ML.TAC {arguments = declArgumentsParens, script = tactic}, MlId.const OPNAME, kont))

  | THEOREM OPNAME declArgumentsParens COLON judgment BY LBRACKET tactic RBRACKET
    (fn kont =>
       ML.BIND (ML.THM {name = OPNAME, arguments = declArgumentsParens, goal = judgment, script = tactic}, MlId.const OPNAME, kont))

  | VAL OPNAME EQUALS mlCmd
   (fn kont =>
      ML.BIND (mlCmd, MlId.const OPNAME, kont))

  | mlCmd
    (fn kont =>
       ML.BIND (mlCmd, MlId.fresh "_", kont))

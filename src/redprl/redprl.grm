structure Ast = RedPrlAst
structure Ar = RedPrlArity
structure Vl = Ar.Vl

open Ast

structure P =
struct
  open RedPrlParamData
  open RedPrlParameterTerm
end

structure O = RedPrlOpData

structure Tac =
struct
  type binding = (string * P.param_sort) list * ast
  infix $$ $ \


  fun makeSeq mt (us : (string * P.param_sort) list) mt' =
    let
      val (syms, sorts) = ListPair.unzip us
    in
      O.MONO (O.MTAC_SEQ sorts) $$ [([],[]) \ mt, (syms,[]) \ mt']
    end

  fun multitacToTac mt =
    O.MONO O.TAC_MTAC $$ [([],[]) \ mt]

  fun tacToMulitac t =
    O.MONO O.MTAC_ALL $$ [([],[]) \ t]

  fun orElse (t1, t2) =
    multitacToTac (O.MONO O.MTAC_ORELSE $$ [([],[]) \ tacToMulitac t1, ([],[]) \ tacToMulitac t2])
end

structure JdgAst =
struct
  (* This essentially duplicates the logic of CJ.synthesis, but I
     can't see any good way to combine them, since this is needed
     in the parser, before we can convert to redprl_jdg (via abt). *)
  fun synthesis ast =
    case Ast.out ast of
       $ (O.MONO O.JDG_EQ, _) => O.TRIV
     | $ (O.MONO O.JDG_MEM, _) => O.TRIV
     | $ (O.MONO O.JDG_TRUE, _) => O.EXP
     | $ (O.MONO O.JDG_EQ_TYPE, _) => O.TRIV
     | $ (O.MONO O.JDG_TYPE, _) => O.TRIV
     | $ (O.MONO O.JDG_SYNTH, _) => O.EXP
     | $ (O.MONO O.JDG_CEQ, _) => O.TRIV
     | _ => raise Fail "Bad judgement AST"

  fun buildSequent acc [] = acc
    | buildSequent acc ((x,jdg) :: hyps) =
      let
        val tau = synthesis jdg
      in
        buildSequent (Ast.$$ (O.MONO (O.SEQ_CONS tau), [\ (([],[]), jdg), \ (([], [x]), acc)])) hyps
      end
end

%%
%header (functor RedPrlLrValsFun (structure Token : TOKEN))

%term
   EOF
 | VARNAME of string
 | OPNAME of string
 | UNDER
 | NUMERAL of int
 | COLON
 | LANGLE | RANGLE
 | LANGLE_PIPE | RANGLE_PIPE
 | LPAREN | RPAREN
 | RBRACKET | LBRACKET
 | LSQUARE | RSQUARE
 | EQUALS
 | DOT
 | APOSTROPHE
 | HASH
 | SEMI
 | COMMA
 | LAMBDA
 | SQUIGGLE
 | SQUIGGLE_ARROW
 | RIGHT_ARROW | LEFT_ARROW | DOUBLE_RIGHT_ARROW
 | BACK_TICK | AT_SIGN | PIPE | DOUBLE_PIPE | PERCENT
 | TIMES
 | DOUBLE_RANGLE

 | HCOM | COE | UNIV | BOOL | S_BOOL | TT | FF | IF | S_IF | PATHS | LOOP | BASE | S1 | FST | SND
 | THEN | ELSE | LET | WITH | CASE | OF

 | FUN_APP

 | DIM | EXN | LBL | LVL | HYP
 | EXP | TAC

 | CMD_PRINT
 | DCL_DEF | DCL_TAC | DCL_THM | DCL_RULE
 | BY | IN

 | MTAC_REC | MTAC_PROGRESS | MTAC_REPEAT | MTAC_AUTO
 | RULE_ID | RULE_AUTO_STEP | RULE_SYMMETRY | RULE_EVAL_GOAL | RULE_CEQUIV_REFL | RULE_HYP | RULE_ELIM | RULE_HEAD_EXP | RULE_LEMMA

 | JDG_TRUE | JDG_TYPE | JDG_SYNTH

%nonassoc SQUIGGLE
%right LEFT_ARROW RIGHT_ARROW DOUBLE_PIPE SEMI
%right TIMES
%nonassoc COMMA COLON
%left FUN_APP
%left AT_SIGN
%nonassoc SND FST S1 BASE LOOP PATHS S_IF IF FF TT S_BOOL BOOL UNIV COE HCOM LAMBDA HASH LANGLE LPAREN VARNAME OPNAME



%nonterm
   start of Signature.src_elt

 | ident of string

   (* a type-theoretic term, including function application *)
 | rawTerm of ast
   (* a type-theoretic term, excluding function application *)
 | atomicRawTerm of ast
   (* ... annotated with source position*)
 | atomicTerm of ast

   (* a type-theoretic term, annotated with source position *)
 | term of ast
 | terms of ast list
 | rawFunApp of ast
 | funApp of ast

 | boundVar of string

   (* abt abstractions *)
 | binder of symbol list * symbol list
 | binding of ast abs
 | bindings of ast abs list

 | symbols of symbol list
 | param of string param
 | params of string param list

   (* the extents of a Kan composition *)
 | extents of string param list
   (* the direction of a coercion of Kan composition *)
 | dir of string param * string param

   (* metavariables and metavariable applications *)
 | metavar of string
 | metavarArgs of string param list * ast list

 | operator of string operator
 | customOpParams of (string param * P.param_sort option) list
 | psort of P.param_sort
 | sort of O.sort
 | psorts of P.param_sort list
 | sorts of O.sort list
 | bindingSig of P.param_sort list * O.sort list
 | valence of Ar.valence

 | rawJudgment of ast
 | judgment of ast

 | seqHyp of string * ast
 | seqHyps of (string * ast) list

 | rawSequent of ast
 | sequent of ast

 | rawTactic of ast
 | tactic of ast
 | tactics of ast list
 | hypBindings of (string * P.param_sort) list
 | multiHypBindings of (string * P.param_sort) list
 | atomicRawMultitac of ast
 | atomicMultitac of ast
 | rawMultitac of ast
 | multitac of ast
 | atomicRawTac of ast
 | atomicTac of ast

 | declArgument of metavariable * Ar.valence
 | declArguments of string Signature.arguments
 | declArgumentsParens of string Signature.arguments
 | declParam of string * P.param_sort
 | declParams of string Signature.params
 | declParamsBrackets of string Signature.params

   (* a declaration in a RedPRL signature *)
 | rawDecl of string * Signature.src_decl
   (* a declaration, annotated with source position *)
 | decl of string * Signature.src_decl * Pos.t
   (* a RedPRL signature *)
 | rawCmd of Signature.src_cmd
 | cmd of Signature.src_cmd * Pos.t
 | elt of Signature.src_elt

%verbose
%pos (string -> Coord.t)
%start start
%eop EOF DOT
%noshift EOF
%name RedPrl
%arg (fileName) : string
%%

start : elt (elt)

ident
  : OPNAME (OPNAME)
  | VARNAME (VARNAME)

psort
  : DIM (P.DIM)
  | EXN (P.EXN)
  | LBL (P.LBL)
  | LVL (P.LVL)
  | HYP (P.HYP)

sort
  : EXP (O.EXP)
  | TAC (O.TAC)

sorts
  : ([])
  | sort ([sort])
  | sort COMMA sorts (sort :: sorts)

psorts
  : ([])
  | psort ([psort])
  | psort COMMA psorts (psort :: psorts)

bindingSig
  : LBRACKET psorts RBRACKET LSQUARE sorts RSQUARE DOT (psorts, sorts)
  | LBRACKET psorts RBRACKET DOT (psorts, [])
  | LSQUARE sorts RSQUARE DOT ([], sorts)
  | ([], [])

valence
  : bindingSig sort ((bindingSig, sort))

param
  : VARNAME (P.VAR VARNAME)
  | NUMERAL (P.APP (case NUMERAL of 0 => P.DIM0 | 1 => P.DIM1 | _ => raise Fail "Invalid dimension constant"))
  | param APOSTROPHE (P.APP (P.LVL_SUCC param))

params
  : ([])
  | param ([param])
  | param COMMA params (param :: params)

extents
  : param ([param])
  | param COMMA extents (param :: extents)

boundVar
  : VARNAME (VARNAME)
  | UNDER ("_")

symbols
  : ([])
  | boundVar ([boundVar])
  | boundVar COMMA symbols (boundVar :: symbols)

terms
  : ([])
  | term ([term])
  | term COMMA terms (term :: terms)
  | PERCENT LBRACKET tactic RBRACKET COMMA terms (tactic :: terms)

binder
  : LBRACKET symbols RBRACKET LSQUARE symbols RSQUARE DOT (symbols1, symbols2)
  | LBRACKET symbols RBRACKET DOT (symbols, [])
  | LSQUARE symbols RSQUARE DOT ([], symbols)
  | ([], [])

binding
  : binder term (\ (binder, term))
  | binder PERCENT LBRACKET tactic RBRACKET (\ (binder, tactic))

bindings
  : ([])
  | binding ([binding])
  | binding SEMI bindings (binding :: bindings)

metavarArgs
  : LBRACKET params RBRACKET LSQUARE terms RSQUARE (params, terms)
  | LBRACKET params RBRACKET (params, [])
  | LSQUARE terms RSQUARE ([], terms)
  | ([], [])

operator
  : LAMBDA (O.MONO O.LAM)
  | HCOM LBRACKET extents SEMI dir RBRACKET (O.POLY (O.HCOM (O.TAG_NONE, extents, dir)))
  | COE LBRACKET dir RBRACKET (O.POLY (O.COE (O.TAG_NONE, dir)))
  | OPNAME customOpParams (O.POLY (O.CUST (OPNAME, customOpParams, NONE)))
  | IF (O.MONO O.IF)
  | S_IF (O.MONO O.S_IF)
  | PATHS (O.MONO O.ID_TY)
  | FST (O.MONO O.FST)
  | SND (O.MONO O.SND)

customOpParams
  : LBRACKET params RBRACKET (List.map (fn x => (x, NONE)) params)
  | ([])

metavar
  : HASH ident (ident)

dir
  : param SQUIGGLE_ARROW param ((param1, param2))

term : rawTerm %prec FUN_APP (annotate (Pos.pos (rawTerm1left fileName) (rawTerm1right fileName)) rawTerm)

atomicRawTerm
  : LPAREN term RPAREN (term)
  | operator LPAREN bindings RPAREN (Ast.$$ (operator, bindings))
  | metavar metavarArgs (Ast.$$# (metavar, metavarArgs))
  | COMMA VARNAME (Ast.$$ (O.POLY (O.HYP_REF VARNAME), []))
  | VARNAME (`` VARNAME)
  | LPAREN boundVar COLON term RPAREN RIGHT_ARROW term (Ast.$$ (O.MONO O.DFUN, [\ (([],[]), term1), \ (([],[boundVar]), term2)]))
  | LPAREN boundVar COLON term RPAREN TIMES term (Ast.$$ (O.MONO O.DPROD, [\ (([],[]), term1), \ (([],[boundVar]), term2)]))
  | LANGLE term COMMA term RANGLE (Ast.$$ (O.MONO O.PAIR, [\ (([],[]), term1), \ (([],[]), term2)]))
  | UNIV LBRACKET param RBRACKET (Ast.$$ (O.POLY (O.UNIV param), []))
  | BOOL (Ast.$$ (O.MONO O.BOOL, []))
  | S_BOOL (Ast.$$ (O.MONO O.S_BOOL, []))
  | TT (Ast.$$ (O.MONO O.TRUE, []))
  | FF (Ast.$$ (O.MONO O.FALSE, []))
  | S1 (Ast.$$ (O.MONO O.S1, []))
  | BASE (Ast.$$ (O.MONO O.BASE, []))
  | LOOP LBRACKET param RBRACKET (Ast.$$ (O.POLY (O.LOOP param), []))
  | LANGLE boundVar RANGLE term (Ast.$$ (O.MONO O.ID_ABS, [\ (([boundVar],[]), term)]))
  | atomicTerm AT_SIGN param %prec AT_SIGN (Ast.$$ (O.POLY (O.ID_AP param), [\ (([],[]), atomicTerm)]))

atomicTerm : atomicRawTerm (annotate (Pos.pos (atomicRawTerm1left fileName) (atomicRawTerm1right fileName)) atomicRawTerm)

rawFunApp
  : rawTerm atomicTerm %prec FUN_APP (Ast.$$ (O.MONO O.AP, [\ (([],[]), (annotate (Pos.pos (rawTerm1left fileName) (rawTerm1right fileName)) rawTerm)), \ (([],[]), atomicTerm)]))
  | atomicTerm %prec FUN_APP (atomicTerm)

funApp : rawFunApp (annotate (Pos.pos (rawFunAppleft fileName) (rawFunAppright fileName)) rawFunApp)

rawTerm
  : funApp RIGHT_ARROW term (Ast.$$ (O.MONO O.DFUN, [\ (([],[]), funApp), \ (([],["_"]), term)]))
  | funApp TIMES term (Ast.$$ (O.MONO O.DPROD, [\ (([],[]), funApp), \ (([],["_"]), term)]))
  | funApp %prec RIGHT_ARROW (funApp)

rawJudgment
  : term JDG_TRUE (Ast.$$ (O.MONO O.JDG_TRUE, [\ (([],[]), term)]))
  | term EQUALS term JDG_TYPE (Ast.$$ (O.MONO O.JDG_EQ_TYPE, [\ (([],[]), term1), \ (([],[]), term2)]))
  | term JDG_TYPE (Ast.$$ (O.MONO O.JDG_TYPE, [\ (([],[]), term)]))
  | term JDG_SYNTH (Ast.$$ (O.MONO O.JDG_SYNTH, [\ (([],[]), term)]))
  | term SQUIGGLE term (Ast.$$ (O.MONO O.JDG_CEQ, [\ (([],[]), term1), \ (([],[]), term2)]))
  | term EQUALS term IN term (Ast.$$ (O.MONO O.JDG_EQ, [\ (([],[]), term1), \ (([],[]), term2), \ (([],[]), term3)]))
  | term IN term (Ast.$$ (O.MONO O.JDG_MEM, [\ (([],[]), term1), \(([],[]), term2)]))

judgment : rawJudgment (annotate (Pos.pos (rawJudgment1left fileName) (rawJudgment1right fileName)) rawJudgment)

seqHyp
  : VARNAME COLON judgment ((VARNAME, judgment))
  | UNDER COLON judgment (("_", judgment))
  | judgment (("_", judgment))

seqHyps
  : ([])
  | seqHyp ([seqHyp])
  | seqHyp COMMA seqHyps (seqHyp :: seqHyps)

rawSequent
  : judgment (Ast.$$ (O.MONO O.SEQ_CONCL, [\ (([],[]), judgment)]))
  | seqHyps DOUBLE_RANGLE judgment (JdgAst.buildSequent (Ast.$$ (O.MONO O.SEQ_CONCL, [\ (([],[]), judgment)])) (List.rev seqHyps))

sequent : rawSequent (annotate (Pos.pos (rawSequent1left fileName) (rawSequent1right fileName)) rawSequent)

atomicRawTac
  : RULE_ID (Ast.$$ (O.MONO O.RULE_ID, []))
  | RULE_AUTO_STEP (Ast.$$ (O.MONO O.RULE_AUTO_STEP, []))
  | RULE_SYMMETRY (Ast.$$ (O.MONO O.RULE_SYMMETRY, []))
  | RULE_EVAL_GOAL (Ast.$$ (O.MONO O.RULE_EVAL_GOAL, []))
  | RULE_CEQUIV_REFL (Ast.$$ (O.MONO O.RULE_CEQUIV_REFL, []))
  | RULE_HYP LBRACKET VARNAME RBRACKET (Ast.$$ (O.POLY (O.RULE_HYP VARNAME), []))
  | RULE_ELIM LBRACKET VARNAME RBRACKET (Ast.$$ (O.POLY (O.RULE_ELIM VARNAME), []))
  | APOSTROPHE term (Ast.$$ (O.MONO O.RULE_WITNESS, [\ (([],[]), term)]))
  | RULE_HEAD_EXP (Ast.$$ (O.MONO O.RULE_HEAD_EXP, []))
  | RULE_LEMMA LBRACKET term COLON sort RBRACKET (Ast.$$ (O.MONO (O.RULE_LEMMA (false, sort)), [\ (([],[]), term)]))

  | atomicTac DOUBLE_PIPE tactic %prec DOUBLE_PIPE (Tac.orElse (atomicTac, tactic))
  | LANGLE_PIPE multitac RANGLE_PIPE (Tac.multitacToTac multitac)

  | LAMBDA boundVar DOT tactic (Ast.$$ (O.MONO O.DEV_FUN_INTRO, [\ (([boundVar], []), tactic)]))
  | LANGLE boundVar RANGLE tactic (Ast.$$ (O.MONO O.DEV_PATH_INTRO, [\ (([boundVar], []), tactic)]))
  | LANGLE tactic COMMA tactic RANGLE (Ast.$$ (O.MONO O.DEV_DPROD_INTRO, [\ (([], []), tactic1), \ (([],[]), tactic2)]))
  | IF VARNAME THEN tactic ELSE tactic
      (Ast.$$ (O.POLY (O.DEV_BOOL_ELIM VARNAME), [\ (([],[]), tactic1), \ (([],[]), tactic2)]))
  | LET VARNAME COLON LSQUARE judgment RSQUARE EQUALS tactic DOT tactic
      (Ast.$$ (O.MONO O.DEV_LET, [\ (([],[]), judgment), \ (([],[]), tactic1), \(([VARNAME],[]), tactic2)]))
  | LET VARNAME WITH VARNAME EQUALS VARNAME tactic DOT tactic
      (Ast.$$ (O.POLY (O.DEV_DFUN_ELIM VARNAME3), [\ (([],[]), tactic1), \ (([VARNAME1, VARNAME2],[]), tactic2)]))
  | LET VARNAME EQUALS VARNAME tactic DOT tactic
      (Ast.$$ (O.POLY (O.DEV_DFUN_ELIM VARNAME2), [\ (([],[]), tactic1), \ (([VARNAME1, "_"],[]), tactic2)]))
  | LET LANGLE VARNAME COMMA VARNAME RANGLE EQUALS VARNAME DOT tactic
      (Ast.$$ (O.POLY (O.DEV_DPROD_ELIM VARNAME3), [\ (([VARNAME1, VARNAME2],[]), tactic)]))
  | CASE VARNAME OF BASE DOUBLE_RIGHT_ARROW tactic PIPE LOOP LBRACKET VARNAME RBRACKET DOUBLE_RIGHT_ARROW tactic
      (Ast.$$ (O.POLY (O.DEV_S1_ELIM VARNAME1), [\ (([],[]), tactic1), \(([VARNAME2], []), tactic2)]))

  | operator LPAREN bindings RPAREN (Ast.$$ (operator, bindings))
  | metavar metavarArgs (Ast.$$# (metavar, metavarArgs))
  | VARNAME (`` VARNAME)

atomicTac : atomicRawTac (annotate (Pos.pos (atomicRawTac1left fileName) (atomicRawTac1right fileName)) atomicRawTac)

atomicRawMultitac
  : LSQUARE tactics RSQUARE (Ast.$$ (O.MONO (O.MTAC_EACH (List.length tactics)), List.map (fn t => \ (([],[]), t)) tactics))
  | HASH NUMERAL LBRACKET tactic RBRACKET (Ast.$$ (O.MONO (O.MTAC_FOCUS NUMERAL), [\ (([],[]), tactic)]))
  | MTAC_REPEAT LBRACKET multitac RBRACKET (Ast.$$ (O.MONO O.MTAC_REPEAT, [\ (([], []), multitac)]))
  | MTAC_AUTO (Ast.$$ (O.MONO O.MTAC_AUTO, []))
  | MTAC_PROGRESS LBRACKET multitac RBRACKET (Ast.$$ (O.MONO O.MTAC_PROGRESS, [\ (([], []), multitac)]))
  | MTAC_REC VARNAME IN LBRACKET multitac RBRACKET (Ast.$$ (O.MONO O.MTAC_REC, [\ (([],[VARNAME]), multitac)]))
  | LBRACKET multitac RBRACKET (multitac)
  | hypBindings LEFT_ARROW atomicRawMultitac SEMI multitac %prec LEFT_ARROW (Tac.makeSeq atomicRawMultitac hypBindings multitac)
  | atomicTac %prec SEMI (Ast.$$ (O.MONO O.MTAC_ALL, [\ (([],[]), atomicTac)]))
  | (Ast.$$ (O.MONO O.MTAC_ALL, [\ (([],[]), Ast.$$ (O.MONO O.RULE_ID, []))]))

atomicMultitac
  : atomicRawMultitac (annotate (Pos.pos (atomicRawMultitac1left fileName) (atomicRawMultitac1right fileName)) atomicRawMultitac)

rawMultitac
  : multitac SEMI atomicMultitac %prec SEMI (Tac.makeSeq multitac [] atomicMultitac)
  | atomicMultitac %prec SEMI (atomicMultitac)

multitac : rawMultitac (annotate (Pos.pos (rawMultitac1left fileName) (rawMultitac1right fileName)) rawMultitac)

multiHypBindings
  : VARNAME ([(VARNAME, P.HYP)])
  | VARNAME COMMA hypBindings ((VARNAME, P.HYP) :: hypBindings)

hypBindings
  : VARNAME ([(VARNAME, P.HYP)])
  | LBRACKET multiHypBindings RBRACKET (multiHypBindings)

rawTactic
  : multitac %prec SEMI (Tac.multitacToTac multitac)

tactic
  : rawTactic (annotate (Pos.pos (rawTactic1left fileName) (rawTactic1right fileName)) rawTactic)

tactics
  : tactic ([tactic])
  | tactic COMMA tactics (tactic :: tactics)

declArgument
  : metavar COLON valence ((metavar, valence))

declArguments
  : ([])
  | declArgument ([declArgument])
  | declArgument SEMI declArguments (declArgument :: declArguments)

declArgumentsParens
  : LPAREN declArguments RPAREN (declArguments)
  | ([])

declParam
  : VARNAME COLON psort (VARNAME, psort)

declParams
  : ([])
  | declParam ([declParam])
  | declParam COMMA declParams (declParam :: declParams)

declParamsBrackets
  : LBRACKET declParams RBRACKET (declParams)
  | ([])

rawDecl
  : DCL_DEF OPNAME declParamsBrackets declArgumentsParens COLON sort EQUALS LSQUARE term RSQUARE
      (OPNAME, Signature.DEF {arguments = declArgumentsParens, params = declParamsBrackets, definiens = term, sort = sort})
  | DCL_TAC OPNAME declParamsBrackets declArgumentsParens EQUALS LSQUARE tactic RSQUARE
      (OPNAME, Signature.TAC {arguments = declArgumentsParens, params = declParamsBrackets, script = tactic})
  | DCL_THM OPNAME declParamsBrackets declArgumentsParens COLON LSQUARE sequent RSQUARE BY LSQUARE tactic RSQUARE
      (OPNAME, Signature.THM {arguments = declArgumentsParens, params = declParamsBrackets, goal = sequent, script = tactic})
  (*| DCL_RULE OPNAME declParamsBrackets declArgumentsParens COLON LSQUARE sequent RSQURE BY LSQURE tactic RSQUARE*)
      (*(OPNAME, Signature.RULE {arguments = declArgumentsParens, params = declParamsBrackets, goal = sequent, script = tactic})*)

decl : rawDecl (#1 rawDecl, #2 rawDecl, Pos.pos (rawDecl1left fileName) (rawDecl1right fileName))

rawCmd
  : CMD_PRINT OPNAME (Signature.PRINT OPNAME)

cmd : rawCmd (rawCmd, (Pos.pos (rawCmd1left fileName) (rawCmd1right fileName)))

elt
  : cmd (Signature.CMD cmd)
  | decl (Signature.DECL decl)

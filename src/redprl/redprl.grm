structure Ast = RedPrlAst
structure Ar = RedPrlArity
structure Vl = Ar.Vl

open Ast

structure P =
struct
  open RedPrlParamData
  open RedPrlSortData
  open RedPrlParameterTerm
end

structure O = RedPrlOpData
structure CJ = RedPrlCategoricalJudgment

fun sortOfJudgment jdg = CJ.synthesis (CJ.fromAst jdg)

structure Tac =
struct
  type binding = (string * P.param_sort) list * ast
  infix $$ $ \

  fun makeSeq mt (us : (string * P.param_sort) list) mt' =
    let
      val (syms, sorts) = ListPair.unzip us
    in
      O.MONO (O.MTAC_SEQ sorts) $$ [([],[]) \ mt, (syms,[]) \ mt']
    end

  fun multitacToTac mt =
    setAnnotation (getAnnotation mt) (O.MONO O.TAC_MTAC $$ [([],[]) \ mt])

  fun tacToMulitac t =
    setAnnotation (getAnnotation t) (O.MONO O.MTAC_ALL $$ [([],[]) \ t])

  fun orElse (t1, t2) =
    multitacToTac (O.MONO O.MTAC_ORELSE $$ [([],[]) \ tacToMulitac t1, ([],[]) \ tacToMulitac t2])

end

structure Multi =
struct
  infix $$ $ \

  fun makeLam [] m = m
    | makeLam (x::xs) m =
        O.MONO O.LAM $$ [([],[x]) \ makeLam xs m]

  fun makeApp m ns =
    List.foldl (fn (n, app) => O.MONO O.APP $$ [([],[]) \ app, ([],[]) \ n]) m ns

  fun makePathAbs [] m = m
    | makePathAbs (u::us) m =
        O.MONO O.PATH_ABS $$ [([u],[]) \ makePathAbs us m]

  fun makePathApp m ns =
    List.foldl (fn (r, app) => O.POLY (O.PATH_APP r) $$ [([],[]) \ app]) m ns

  fun makeNum i =
    case IntInf.compare (i, 0) of
      GREATER => O.MONO O.SUCC $$ [([],[]) \ makeNum (IntInf.- (i, 1))]
    | EQUAL => O.MONO O.ZERO $$ []
    | LESS => O.MONO O.NEGSUCC $$ [([],[]) \ makeNum (IntInf.- (IntInf.~ i, 1))]

  fun flatten xsys = List.concat (List.map (fn (xs, y) => List.map (fn x => (x, y)) xs) xsys)

  fun makeQuant opr [] cod = cod
    | makeQuant opr ((x, a) :: doms) cod =
       O.MONO opr $$ [([],[]) \ a, ([],[x]) \ makeQuant opr doms cod]

  val makeDFun = makeQuant O.DFUN o flatten
  val makeDProd = makeQuant O.DPROD o flatten

  fun makeRecord tbs =
    let
      val (lbls, tys) = ListPair.unzip (flatten tbs)
    in
      O.MONO (O.RECORD lbls) $$ List.map (fn ty => ([],[]) \ ty) tys
    end
  fun makeTuple fields =
    let
      val (lbls, args) = ListPair.unzip fields
    in
      O.MONO (O.TUPLE lbls) $$ List.map (fn a => ([],[]) \ a) args
    end
end


%%
%header (functor RedPrlLrValsFun (structure Token : TOKEN))

%term
   EOF

 | VARNAME of string
 | OPNAME of string
 | UNDER
 | NUMERAL of IntInf.int

 | COLON
 (* delimiters *)
 | LANGLE | RANGLE | DOUBLE_RANGLE
 | LANGLE_PIPE | RANGLE_PIPE
 | LPAREN | RPAREN
 | RBRACKET | LBRACKET
 | LSQUARE | RSQUARE
 (* (mostly) single-character symbols *)
 | BACK_TICK
 | COMMA
 | AMPERSAND
 | DOT
 | EQUALS
 | HASH
 | PERCENT
 | PIPE | DOUBLE_PIPE
 | QUESTION
 | SEMI
 (* arrows *)
 | SQUIGGLE_ARROW
 | RIGHT_ARROW | LEFT_ARROW | DOUBLE_RIGHT_ARROW | LONG_RIGHT_ARROW

 (* sorts *)
 | DIM | EXN | HYP
 | EXP | TAC | TRIV

 (* keywords and symbols in expressions *)
 | FCOM
 | BOOL | TT | FF | IF
 | WBOOL | WIF
 | NAT | ZERO | SUCC | NAT_REC
 | INT | NEGSUCC | INT_REC
 | VOID
 | S1 | BASE | LOOP | S1_REC
 | LAMBDA | DOLLAR_SIGN
 | TIMES | PAIR | FST | SND
 | RECORD | TUPLE | BANG
 | PATHS | ABS | AT_SIGN
 | HCOM | COE

 (* keywords in tactics *)
 | CASE | OF
 | FRESH
 | LET | WITH
 | THEN | ELSE
 | MTAC_REC | MTAC_PROGRESS | MTAC_REPEAT | MTAC_AUTO | MTAC_HOLE
 | RULE_ID | RULE_AUTO_STEP | RULE_SYMMETRY | RULE_ELIM | RULE_HEAD_EXP | RULE_LEMMA | RULE_CUT_LEMMA | RULE_UNFOLD

 (* keywords in judgments *)
 | JDG_TRUE | JDG_TYPE | JDG_SYNTH

 (* commands and declarations *)
 | CMD_PRINT | CMD_EXTRACT
 | DCL_DEF | DCL_TAC | DCL_THM | DCL_RULE
 | BY | IN

%right LEFT_ARROW RIGHT_ARROW DOUBLE_PIPE SEMI
%right TIMES
%nonassoc COMMA AMPERSAND COLON
%nonassoc FCOM BOOL TT FF IF WBOOL WIF NAT ZERO SUCC NAT_REC INT NEGSUCC INT_REC VOID S1 BASE LOOP LAMBDA DOLLAR_SIGN PAIR FST SND PATHS ABS AT_SIGN HCOM COE
%nonassoc HASH LANGLE LPAREN VARNAME OPNAME



%nonterm
   start of Signature.src_elt

 | ident of string
 | boundVar of string
 | boundVars of string list

 | psort of P.param_sort
 | psorts of P.param_sort list
 | sort of O.sort
 | sorts of O.sort list

 | bindingSig of P.param_sort list * O.sort list
 | valence of Ar.valence

   (* parameters *)
 | param of string param
 | params of string param list
 | dir of string param * string param
 | equation of string param * string param
 | tube of (string param * string param) * ast abs
 | tubes of ((string param * string param) * ast abs) list

 | metavar of string
 | customOpParams of (string param * P.param_sort option) list

 | typedBinder of string list * ast
 | typedBinders of (string list * ast) list
 | quantifierData of (string list * ast) list * ast
 | field of string * ast
 | fields of (string * ast) list

   (* abt abstractions *)
 | binder of string list * string list
 | binding of ast abs
 | bindings of ast abs list

   (* a type-theoretic term *)
 | monoNullaryOperator of string operator
 | polyNullaryOperator of string operator
 | regularMultinaryOperator of string operator
 | rawTermAndTac of ast (* shared with tactics *)
 | rawTerm of ast

   (* a type-theoretic term, annotated with source position *)
 | term of ast
 | terms of ast list

 | rawJudgment of ast
 | judgment of ast

 | src_catjdg of Signature.src_catjdg
 | src_seqhyp of Signature.src_seqhyp
 | src_seqhyps of Signature.src_seqhyp list
 | src_sequent of Signature.src_sequent

 | atomicRawTac of ast
 | atomicTac of ast
 | atomicRawMultitac of ast
 | atomicMultitac of ast
 | rawMultitac of ast
 | multitac of ast
 | hypBinding of string * P.param_sort
 | hypBindings of (string * P.param_sort) list
 | rawTactic of ast
 | tactic of ast
 | tactics of ast list

 | declArgument of metavariable * Ar.valence
 | declArguments of string Signature.arguments
 | declArgumentsParens of string Signature.arguments
 | declParam of string * P.param_sort
 | declParams of string Signature.params
 | declParamsBrackets of string Signature.params

   (* a declaration, annotated with source position *)
 | decl of string * Signature.src_decl * Pos.t
   (* a RedPRL signature *)
 | rawCmd of Signature.src_cmd
 | cmd of Signature.src_cmd * Pos.t
 | elt of Signature.src_elt

%verbose
%pos (string -> Coord.t)
%start start
%eop EOF DOT
%noshift EOF
%name RedPrl
%arg (fileName) : string
%%

start : elt (elt)

ident
  : OPNAME (OPNAME)
  | VARNAME (VARNAME)

boundVar
  : VARNAME (VARNAME)
  | UNDER ("_")

boundVars
  : boundVar ([boundVar])
  | boundVar boundVars (boundVar :: boundVars)

psort
  : DIM (P.DIM)
  | EXN (P.EXN)
  | HYP (P.HYP O.EXP)

psorts
  : psort ([psort])
  | psort COMMA psorts (psort :: psorts)
  | ([])

sort
  : EXP (O.EXP)
  | TAC (O.TAC)
  | TRIV (O.TRIV)

sorts
  : sort ([sort])
  | sort COMMA sorts (sort :: sorts)
  | ([])

bindingSig
  : LBRACKET psorts RBRACKET LSQUARE sorts RSQUARE DOT (psorts, sorts)
  | LBRACKET psorts RBRACKET DOT (psorts, [])
  | LSQUARE sorts RSQUARE DOT ([], sorts)
  | ([], [])

valence
  : bindingSig sort ((bindingSig, sort))

param
  : VARNAME (P.VAR VARNAME)
  | NUMERAL (P.APP (case NUMERAL of 0 => P.DIM0 | 1 => P.DIM1 | _ => raise Fail "Invalid dimension constant"))

params
  : param ([param])
  | param params (param :: params)

dir
  : param SQUIGGLE_ARROW param ((param1, param2))

equation
  : LPAREN equation RPAREN (equation)
  | param EQUALS param (param1, param2)

tube
  : LSQUARE equation binding RSQUARE (equation, binding)

tubes
  : tube ([tube])
  | tube tubes (tube :: tubes)

metavar
  : HASH ident (ident)

customOpParams
  : params (List.map (fn x => (x, NONE)) params)

typedBinder
  : LSQUARE boundVars COLON term RSQUARE ((boundVars, term))

typedBinders
  : typedBinder ([typedBinder])
  | typedBinder typedBinders (typedBinder :: typedBinders)

quantifierData
  : typedBinder quantifierData ((typedBinder :: #1 quantifierData), #2 quantifierData)
  | term quantifierData (((["_"], term) :: #1 quantifierData), #2 quantifierData)
  | term ([], term)

field
  : LSQUARE ident term RSQUARE (ident, term)

fields
  : field fields (field :: fields)
  | field ([field])

binder
  : LBRACKET boundVars RBRACKET LSQUARE boundVars RSQUARE (boundVars1, boundVars2)
  | LBRACKET boundVars RBRACKET (boundVars, [])
  | LSQUARE boundVars RSQUARE ([], boundVars)

binding
  : binder term (\ (binder, term))
  | term (\ (([],[]), term))

bindings
  : binding bindings (binding :: bindings)
  | binding ([binding])

(* built-in nullary operators that take no parameters *)
monoNullaryOperator
  (* bools *)
  : BOOL (O.MONO O.BOOL)
  | TT (O.MONO O.TT)
  | FF (O.MONO O.FF)
  (* weak bools *)
  | WBOOL (O.MONO O.WBOOL)
  (* natural numbers *)
  | NAT (O.MONO O.NAT)
  | ZERO (O.MONO O.ZERO)
  (* integers *)
  | INT (O.MONO O.INT)
  (* void *)
  | VOID (O.MONO O.VOID)
  (* circle *)
  | S1 (O.MONO O.S1)
  | BASE (O.MONO O.BASE)

(* built-in nullary operators that take parameters *)
polyNullaryOperator
  (* circle *)
  : LOOP param (O.POLY (O.LOOP param))
  | DIM param (O.POLY (O.DIM_REF param))

(* built-in operators that do not have special form *)
regularMultinaryOperator
  (* bools *)
  : IF (O.MONO O.IF)
  (* weak bools *)
  | WIF (O.MONO O.WIF)
  (* natural numbers *)
  | SUCC (O.MONO O.SUCC)
  | NAT_REC (O.MONO O.NAT_REC)
  (* integers *)
  | NEGSUCC (O.MONO O.NEGSUCC)
  | INT_REC (O.MONO O.INT_REC)
  (* paths *)
  | PATHS (O.MONO O.PATH_TY)
  (* pairs *)
  | PAIR (O.MONO O.PAIR)
  | FST (O.MONO O.FST)
  | SND (O.MONO O.SND)
  (* coe *)
  | COE LBRACKET dir RBRACKET (O.POLY (O.COE dir))

rawTermAndTac
  : VARNAME (`` VARNAME)

  (* meta variable *)
  | metavar (Ast.$$# (metavar, ([], [])))
  | LPAREN metavar terms RPAREN (Ast.$$# (metavar, ([], terms)))
  | LBRACKET metavar params RBRACKET (Ast.$$# (metavar, (params, [])))
  | LPAREN LBRACKET metavar params RBRACKET terms RPAREN (Ast.$$# (metavar, (params, terms)))

  (* custom operators *)
  | OPNAME (Ast.$$ (O.POLY (O.CUST (OPNAME, [], NONE)), []))
  | LPAREN OPNAME bindings RPAREN (Ast.$$ (O.POLY (O.CUST (OPNAME, [], NONE)), bindings))
  | LBRACKET OPNAME customOpParams RBRACKET (Ast.$$ (O.POLY (O.CUST (OPNAME, customOpParams, NONE)), []))
  | LPAREN LBRACKET OPNAME customOpParams RBRACKET bindings RPAREN (Ast.$$ (O.POLY (O.CUST (OPNAME, customOpParams, NONE)), bindings))

  (* built-in operators that can be handled uniformly *)
  | monoNullaryOperator (Ast.$$ (monoNullaryOperator, []))
  | LPAREN polyNullaryOperator RPAREN (Ast.$$ (polyNullaryOperator, []))
  | LPAREN regularMultinaryOperator bindings RPAREN (Ast.$$ (regularMultinaryOperator, bindings))

  (* compositions *)
  | LPAREN FCOM LBRACKET dir RBRACKET binding tubes RPAREN
      (let val (eqs, tubes) = ListPair.unzip tubes in Ast.$$ (O.POLY (O.FCOM (dir, eqs)), (binding :: tubes)) end)
  | LPAREN FCOM LBRACKET dir RBRACKET binding RPAREN
      (Ast.$$ (O.POLY (O.FCOM (dir, [])), [binding]))
  | LPAREN HCOM LBRACKET dir RBRACKET binding binding tubes RPAREN
      (let val (eqs, tubes) = ListPair.unzip tubes in Ast.$$ (O.POLY (O.HCOM (dir, eqs)), (binding1 :: binding2 :: tubes)) end)
  | LPAREN HCOM LBRACKET dir RBRACKET binding binding RPAREN
      (Ast.$$ (O.POLY (O.HCOM (dir, [])), [binding1, binding2]))

  (* numbers *)
  | NUMERAL (Multi.makeNum NUMERAL)

  (* function types *)
  | LPAREN RIGHT_ARROW quantifierData RPAREN (Multi.makeDFun (#1 quantifierData) (#2 quantifierData))
  | LPAREN LAMBDA LSQUARE boundVars RSQUARE term RPAREN (Multi.makeLam boundVars term)
  | LPAREN DOLLAR_SIGN term terms RPAREN (Multi.makeApp term terms)

  (* pair types *)
  | LPAREN TIMES quantifierData RPAREN (Multi.makeDProd (#1 quantifierData) (#2 quantifierData))

  (* non-dep. record types *)
  | RECORD (Multi.makeRecord [])
  | LPAREN RECORD typedBinders RPAREN (Multi.makeRecord typedBinders)
  | TUPLE (Multi.makeTuple [])
  | LPAREN TUPLE fields RPAREN (Multi.makeTuple fields)
  | LPAREN BANG ident term RPAREN (Ast.$$ (O.MONO (O.PROJ ident), [\ (([], []), term)]))

  (* paths *)
  | LPAREN ABS LBRACKET boundVars RBRACKET term RPAREN (Multi.makePathAbs boundVars term)
  | LPAREN AT_SIGN term params RPAREN (Multi.makePathApp term params)

rawTerm
  : rawTermAndTac (rawTermAndTac)
  (* hypotheses *)
  | COMMA VARNAME (Ast.$$ (O.POLY (O.HYP_REF VARNAME), []))

term : rawTerm (annotate (Pos.pos (rawTerm1left fileName) (rawTerm1right fileName)) rawTerm)

terms
  : term ([term])
  | term terms (term :: terms)

rawJudgment
  : term EQUALS term IN term (Ast.$$ (O.MONO O.JDG_EQ, [\ (([],[]), term1), \ (([],[]), term2), \ (([],[]), term3)]))
  | term IN term (Ast.$$ (O.MONO O.JDG_EQ, [\ (([],[]), term1), \ (([],[]), term1), \ (([],[]), term2)]))
  | term JDG_TRUE (Ast.$$ (O.MONO O.JDG_TRUE, [\ (([],[]), term)]))
  | term (Ast.$$ (O.MONO O.JDG_TRUE, [\ (([],[]), term)]))
  | term EQUALS term JDG_TYPE (Ast.$$ (O.MONO O.JDG_EQ_TYPE, [\ (([],[]), term1), \ (([],[]), term2)]))
  | term JDG_TYPE (Ast.$$ (O.MONO O.JDG_EQ_TYPE, [\ (([],[]), term), \ (([],[]), term)]))
  | term JDG_SYNTH (Ast.$$ (O.MONO O.JDG_SYNTH, [\ (([],[]), term)]))

judgment : rawJudgment (annotate (Pos.pos (rawJudgment1left fileName) (rawJudgment1right fileName)) rawJudgment)

src_catjdg
  : term JDG_TRUE (CJ.TRUE term)
  | term EQUALS term JDG_TYPE (CJ.EQ_TYPE (term1, term1))
  | term JDG_TYPE (CJ.TYPE term)
  | term JDG_SYNTH (CJ.SYNTH term)
  | term EQUALS term IN term (CJ.EQ ((term1, term2), term3))
  | term IN term (CJ.MEM (term1, term2))
  | term (CJ.TRUE term)

src_seqhyp
  : VARNAME COLON src_catjdg ((VARNAME, src_catjdg))
  | UNDER COLON src_catjdg (("_", src_catjdg))
  | src_catjdg (("_", src_catjdg))

src_seqhyps
  : src_seqhyp ([src_seqhyp])
  | src_seqhyp COMMA src_seqhyps (src_seqhyp :: src_seqhyps)
  | ([])

src_sequent
  : src_catjdg ([], src_catjdg)
  | src_seqhyps DOUBLE_RANGLE src_catjdg (src_seqhyps, src_catjdg)

atomicRawTac
  : RULE_ID (Ast.$$ (O.MONO O.RULE_ID, []))
  | RULE_AUTO_STEP (Ast.$$ (O.MONO O.RULE_AUTO_STEP, []))
  | RULE_SYMMETRY (Ast.$$ (O.MONO O.RULE_SYMMETRY, []))
  | HYP VARNAME COLON sort (Ast.$$ (O.POLY (O.RULE_HYP (VARNAME, sort)), []))
  | HYP VARNAME (Ast.$$ (O.POLY (O.RULE_HYP (VARNAME, O.EXP)), []))
  | RULE_ELIM VARNAME COLON sort (Ast.$$ (O.POLY (O.RULE_ELIM (VARNAME, sort)), []))
  | RULE_ELIM VARNAME (Ast.$$ (O.POLY (O.RULE_ELIM (VARNAME, O.EXP)), []))
  | RULE_UNFOLD OPNAME (Ast.$$ (O.POLY (O.RULE_UNFOLD OPNAME), []))
  | BACK_TICK term (Ast.$$ (O.MONO (O.RULE_EXACT O.EXP), [\ (([],[]), term)]))
  | AMPERSAND param (Ast.$$ (O.MONO (O.RULE_EXACT O.DIM_EXP), [\ (([],[]), Ast.$$ (O.POLY (O.DIM_REF param), []))]))
  | RULE_HEAD_EXP (Ast.$$ (O.MONO O.RULE_HEAD_EXP, []))

  | atomicTac DOUBLE_PIPE tactic %prec DOUBLE_PIPE (Tac.orElse (atomicTac, tactic))
  | LANGLE_PIPE multitac RANGLE_PIPE (Tac.multitacToTac multitac)

  | LAMBDA boundVar DOT tactic (Ast.$$ (O.MONO O.DEV_DFUN_INTRO, [\ (([boundVar], []), tactic)]))
  | LANGLE boundVar RANGLE tactic (Ast.$$ (O.MONO O.DEV_PATH_INTRO, [\ (([boundVar], []), tactic)]))
  | LANGLE tactic COMMA tactic RANGLE (Ast.$$ (O.MONO O.DEV_DPROD_INTRO, [\ (([], []), tactic1), \ (([],[]), tactic2)]))
  | IF VARNAME THEN tactic ELSE tactic
      (Ast.$$ (O.POLY (O.DEV_BOOL_ELIM VARNAME), [\ (([],[]), tactic1), \ (([],[]), tactic2)]))
  | LET VARNAME COLON LSQUARE judgment RSQUARE EQUALS tactic DOT tactic
      (Ast.$$ (O.MONO (O.DEV_LET (sortOfJudgment judgment)), [\ (([],[]), judgment), \ (([],[]), tactic1), \(([VARNAME],[]), tactic2)]))
  | LET VARNAME WITH VARNAME EQUALS VARNAME tactic DOT tactic
      (Ast.$$ (O.POLY (O.DEV_DFUN_ELIM VARNAME3), [\ (([],[]), tactic1), \ (([VARNAME1, VARNAME2],[]), tactic2)]))
  | LET VARNAME EQUALS VARNAME tactic DOT tactic
      (Ast.$$ (O.POLY (O.DEV_DFUN_ELIM VARNAME2), [\ (([],[]), tactic1), \ (([VARNAME1, "_"],[]), tactic2)]))
  | LET LANGLE VARNAME COMMA VARNAME RANGLE EQUALS VARNAME DOT tactic
      (Ast.$$ (O.POLY (O.DEV_DPROD_ELIM VARNAME3), [\ (([VARNAME1, VARNAME2],[]), tactic)]))
  | CASE VARNAME OF BASE DOUBLE_RIGHT_ARROW tactic PIPE LOOP VARNAME DOUBLE_RIGHT_ARROW tactic
      (Ast.$$ (O.POLY (O.DEV_S1_ELIM VARNAME1), [\ (([],[]), tactic1), \(([VARNAME2], []), tactic2)]))

  | RULE_CUT_LEMMA LBRACKET OPNAME customOpParams RBRACKET (Ast.$$ (O.POLY (O.RULE_CUT_LEMMA (OPNAME, customOpParams)), []))
  | RULE_CUT_LEMMA OPNAME (Ast.$$ (O.POLY (O.RULE_CUT_LEMMA (OPNAME, [])), []))
  | RULE_LEMMA LBRACKET OPNAME customOpParams RBRACKET (Ast.$$ (O.POLY (O.RULE_LEMMA (OPNAME, customOpParams)), []))
  | RULE_LEMMA OPNAME (Ast.$$ (O.POLY (O.RULE_LEMMA (OPNAME, [])), []))

  (* overlapping with term *)
  | rawTermAndTac (rawTermAndTac)

atomicTac : atomicRawTac (annotate (Pos.pos (atomicRawTac1left fileName) (atomicRawTac1right fileName)) atomicRawTac)

atomicRawMultitac
  : LSQUARE tactics RSQUARE (Ast.$$ (O.MONO (O.MTAC_EACH (List.length tactics)), List.map (fn t => \ (([],[]), t)) tactics))
  | HASH NUMERAL LBRACKET tactic RBRACKET (Ast.$$ (O.MONO (O.MTAC_FOCUS (IntInf.toInt NUMERAL)), [\ (([],[]), tactic)]))
  | MTAC_REPEAT LBRACKET multitac RBRACKET (Ast.$$ (O.MONO O.MTAC_REPEAT, [\ (([], []), multitac)]))
  | MTAC_AUTO (Ast.$$ (O.MONO O.MTAC_AUTO, []))
  | MTAC_PROGRESS LBRACKET multitac RBRACKET (Ast.$$ (O.MONO O.MTAC_PROGRESS, [\ (([], []), multitac)]))
  | MTAC_REC VARNAME IN LBRACKET multitac RBRACKET (Ast.$$ (O.MONO O.MTAC_REC, [\ (([],[VARNAME]), multitac)]))
  | LBRACKET multitac RBRACKET (multitac)
  | FRESH hypBindings LEFT_ARROW atomicRawMultitac SEMI multitac %prec LEFT_ARROW (Tac.makeSeq atomicRawMultitac hypBindings multitac)
  | atomicTac %prec SEMI (Ast.$$ (O.MONO O.MTAC_ALL, [\ (([],[]), atomicTac)]))
  | QUESTION ident (Ast.$$ (O.MONO (O.MTAC_HOLE (SOME ident)), []))
  | QUESTION (Ast.$$ (O.MONO (O.MTAC_HOLE NONE), []))
  | (Ast.$$ (O.MONO O.MTAC_ALL, [\ (([],[]), Ast.$$ (O.MONO O.RULE_ID, []))]))

atomicMultitac
  : atomicRawMultitac (annotate (Pos.pos (atomicRawMultitac1left fileName) (atomicRawMultitac1right fileName)) atomicRawMultitac)

rawMultitac
  : multitac SEMI atomicMultitac %prec SEMI (Tac.makeSeq multitac [] atomicMultitac)
  | atomicMultitac %prec SEMI (atomicMultitac)

multitac : rawMultitac (annotate (Pos.pos (rawMultitac1left fileName) (rawMultitac1right fileName)) rawMultitac)

hypBinding
  : VARNAME COLON psort (VARNAME, psort)
  | VARNAME (VARNAME, P.HYP O.EXP)

hypBindings
  : hypBinding ([hypBinding])
  | hypBinding COMMA hypBindings %prec COMMA (hypBinding :: hypBindings)
  | ([])

rawTactic
  : multitac %prec SEMI (Tac.multitacToTac multitac)

tactic
  : rawTactic (annotate (Pos.pos (rawTactic1left fileName) (rawTactic1right fileName)) rawTactic)

tactics
  : tactic ([tactic])
  | tactic COMMA tactics (tactic :: tactics)

declArgument
  : metavar COLON valence ((metavar, valence))
  | metavar ((metavar, (([],[]), O.EXP)))

declArguments
  : declArgument ([declArgument])
  | declArgument SEMI declArguments (declArgument :: declArguments)
  | ([])

declArgumentsParens
  : LPAREN declArguments RPAREN (declArguments)
  | ([])

declParam
  : VARNAME COLON psort (VARNAME, psort)

declParams
  : declParam ([declParam])
  | declParam COMMA declParams (declParam :: declParams)
  | ([])

declParamsBrackets
  : LBRACKET declParams RBRACKET (declParams)
  | ([])

decl
  : DCL_DEF OPNAME declParamsBrackets declArgumentsParens COLON sort EQUALS LSQUARE term RSQUARE
      (OPNAME, Signature.DEF {arguments = declArgumentsParens, params = declParamsBrackets, definiens = term, sort = sort}, Pos.pos (OPNAMEleft fileName) (OPNAMEright fileName))
  | DCL_DEF OPNAME declParamsBrackets declArgumentsParens EQUALS LSQUARE term RSQUARE
      (OPNAME, Signature.DEF {arguments = declArgumentsParens, params = declParamsBrackets, definiens = term, sort = O.EXP}, Pos.pos (OPNAMEleft fileName) (OPNAMEright fileName))
  | DCL_TAC OPNAME declParamsBrackets declArgumentsParens EQUALS LSQUARE tactic RSQUARE
      (OPNAME, Signature.TAC {arguments = declArgumentsParens, params = declParamsBrackets, script = tactic}, Pos.pos (OPNAMEleft fileName) (OPNAMEright fileName))
  | DCL_THM OPNAME declParamsBrackets declArgumentsParens COLON LSQUARE src_sequent RSQUARE BY LSQUARE tactic RSQUARE
      (OPNAME, Signature.THM {arguments = declArgumentsParens, params = declParamsBrackets, goal = src_sequent, script = tactic}, Pos.pos (OPNAMEleft fileName) (OPNAMEright fileName))

rawCmd
  : CMD_PRINT OPNAME (Signature.PRINT OPNAME)
  | CMD_EXTRACT OPNAME (Signature.EXTRACT OPNAME)

cmd : rawCmd (rawCmd, (Pos.pos (rawCmd1left fileName) (rawCmd1right fileName)))

elt
  : cmd (Signature.CMD cmd)
  | decl (Signature.DECL decl)
